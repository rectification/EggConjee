{"path":"/post/functional-light-js-02","name":"functional-light-js-02","title":"函数式函数的基础","category":"JS轻量级函数式编程","date":["2017","03","20"],"tag":["JavaScript","函数式编程","翻译"],"layout":"post","toc":[{"tocTitle":"函数是什么？","bolt":"函数是什么？","child":[{"tocTitle":"数学基础复习","bolt":"数学基础复习","parent":"函数是什么？"},{"tocTitle":"函数与过程","bolt":"函数与过程","parent":"函数是什么？"}]},{"tocTitle":"函数输入","bolt":"函数输入","child":[{"tocTitle":"统计输入","bolt":"统计输入","child":[{"tocTitle":"实参的技巧","bolt":"实参的技巧","parent":"统计输入"},{"tocTitle":"形参的技巧","bolt":"形参的技巧","parent":"统计输入"}],"parent":"函数输入"},{"tocTitle":"根据输入而变化的函数","bolt":"根据输入而变化的函数","parent":"函数输入"}]},{"tocTitle":"函数的输出","bolt":"函数的输出","child":[{"tocTitle":"提前返回","bolt":"提前返回","parent":"函数的输出"},{"tocTitle":"没有返回的输出","bolt":"没有返回的输出","parent":"函数的输出"}]},{"tocTitle":"函数的函数","bolt":"函数的函数","child":[{"tocTitle":"保持作用域","bolt":"保持作用域","parent":"函数的函数"}]},{"tocTitle":"语法","bolt":"语法","child":[{"tocTitle":"名字之中都有什么?","bolt":"名字之中都有什么?","parent":"语法"},{"tocTitle":"没有function的函数","bolt":"没有function的函数","parent":"语法"}]},{"tocTitle":"这(This)是什么？","bolt":"这(This)是什么？","child":[{"tocTitle":"总结","bolt":"总结","parent":"这(This)是什么？"}]}],"excerpt":["《JS轻量级函数式编程》系列的第二本。这一本主要是对JavaScript中的函数进行了梳理。从最基本的高中代数知识开始，介绍了函数的用法和若干技巧，在其中还简单的比较了过程式和命令式代码的特点。总之这是非常基础的一章，但也正如作者是所说，这里讲述的函数远比你自己知道的要多。"],"next":false,"prev":{"path":"/post/functional-light-js-01","title":"为什么需要函数式编程？"},"content":"<p><span>函数式编程<strong>并不仅仅意味着使用 function 关键字来进行编程</strong>。如果它就是这么简单，那么这本书到这里就可以结束了！但不幸的是，函数也的确是函数式编程的核心，而且我们也是使用函数来让代码变得更加<em>函数式</em>的。</span></p><p><span>但是，你真的知道<em>函数</em>的意义到底是什么吗？</span><span>在本章之中，我们将会为本书的其余部分奠定基础，在这里我们将会涵盖函数的所有基础知识。在某种意义上来说，这里的内容是对所有非函数式程序员们所知道的函数知识的回顾。但是如果我们想要更多的学习函数式编程的概念，我们必须对函数<em>了若指掌</em>。</span><span>不要放弃，因为这里讲述的函数远比你自己知道的要多。</span></p><h1 id=\"函数是什么？\">函数是什么？</h1><p><span>我想我们开始学习函数式编程最自然的方式那就是使用<em>函数</em>来编程了。这看起来实在是太简单和明显了，但是我认为我们的旅程需要这坚实的第一步。</span><span>所以……函数是什么？</span><span>dsadsadsa</span></p><h2 id=\"数学基础复习\">数学基础复习</h2><p><span>我知道我承诺过我们会尽量远离数学，但是请继续忍受我一会儿，在我们继续之前，先来快速复习一下在代数上有关函数和图像的相关基础知识。</span><span>你还记得你在学校里学习的有关 <em>f(x)</em> 的相关知识吗？等式 <em>y = f(x)</em> 在描述什么？</span><span>我们像这样定义了一个等式：<em>f(x) = 2x<sup>2</sup> + 3</em>，它的意义是什么？绘制该方程又是什么意思？这里就是它的图像：</span><span><img class=\"img-block\" src=\"https://github.com/getify/Functional-Light-JS/blob/master/fig1.png?raw=true\" alt=\"函数图像\" title=\"函数图像\"><span class=\"img-title\">图1　函数图像</span></span></p><p><span>你注意到了吗？对于<code>x</code>的任意值，例如<code>2</code>，如果你把它代入方程之中，你会得到<code>11</code>。但是<code>11</code>又是什么？它是函数<code>f(x)</code>的<em>返回值</em>，这就是我们前面所说的描述的一个<code>y</code>值。</span></p><p><span>换句话来说，在图中的曲线上有一点<code>(2, 11)</code>。对于每个我们带入的<code>x</code>的值，我们都能得到与之对应的<code>y</code>，它们就可以组成一个点的坐标。比如<code>(0, 3)</code>，<code>(-1, 5)</code>。将所有的这些点放在一起，你就能得到如上图所示的抛物线图形。</span></p><p><span>所以，这和函数式编程有什么关系呢？</span></p><p><span>在数学中，一个函数输入了一个或多个值，那么总能够得到一个与之对应的输出。在函数式编程中你常常能听到一个词，叫“<em>态射(morphism)</em>”，这是描述从一组值映射到另一组值的奇特方式，就像是函数的输入和输出的关系。</span><span>在代数运算之中，这些输入和输出通常被解释为曲线坐标的一部分。然而，在我们的程序中，我们可以定义各种输入输出的函数，并且它们并不需要与可视的图像曲线有任何关系。</span></p><h2 id=\"函数与过程\">函数与过程</h2><p><span>为什么我们一直在谈论数学和图像？因为在某种意义上来说，函数式编程中的<em>函数</em>就是数学意义上的<em>函数</em>。</span><span>你可能更习惯于将函数当作是过程。它们有什么不同？任意函数功能的集合，它可能有输入，也可能没有；它可能有一个输出（返回值），也可能没有。</span></p><p><span>但，函数接受输入，并且一定有一个返回值。</span></p><p><span>如果你打算做函数式编程，<strong>你应该尽可能多的使用函数</strong>，而不是过程，所有的函数都应该接受输入和返回输出。至于为什么，这个问题的答案将会有很多种层次上的意义，我们将会在书中慢慢解释它。</span></p><h1 id=\"函数输入\">函数输入</h1><p><span>从上面的定义来说，所有的函数都需要输入。</span><span>你可能时常听到人们常说“<em>实际参数(arguments)</em>”，又或者是“<em>形式参数(parameters)</em>”。他们到底在说什么？</span><span><em>实际参数</em>就是指你传进函数的值，<em>形式参数</em>是在函数内部的具名变量，它们将会接受这些传进来的值。我们举个例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">3</span>;</li><li></li><li>foo( a, a * <span class=\"hljs-number\">2</span> );</li></ul></code></pre><p><span><code>a</code>和<code>a * 2</code>（实际上应该是这个表达式的结果——<code>6</code>）都是<code>foo(..)</code>调用的<em>实际参数</em>。<code>x</code>和<code>y</code>都是接受了这些值（分别是<code>3</code>和<code>6</code>）的<em>形式参数</em>。</span></p><p class=\"note\"><span>在JavaScript中，并不要求形参和实参的数量一定要匹配。如果你传递的实参多余了你声明的用来接收它们的形参数量，这些值也会被传递，只是你无法直接访问它们。这些值可以通过几种不同的方式来访问，当然也包括你可能已经听说过的<code>arguments</code>对象。假设你传递的实参少于了你声明的形参，则每个没有接受实参的形参都将会是个“undefined”变量，就是说在当前的函数作用域中可以找到这个变量，但是它初始化的值是<code>undefined</code>。</span></p><h2 id=\"统计输入\">统计输入</h2><p><span>函数“期望”的实参数量——你可能想要传递给它的实参数量——是由声明的形参数量决定的。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span><code>foo(..)</code>期望三个实参，因为这里有三个声明的形参。这个计数有一个特殊的术语来描述它：计数值（arity）。 计数值是函数声明中的形参数量。<code>foo（..)</code>的计数值是<code>3</code>。</span><span>你可能希望在程序运行期间检查函数的形参数量，这可以通过该函数引用的<code>length</code>属性来完成：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo.length;             <span class=\"hljs-comment\">// 3</span></li></ul></code></pre><p><span>为什么会想要在运行期间来确定计数值，是因为可能存在这样的情况，如果一段代码从多个源接收到了某个函数的引用，并且需要根据每个函数引用的计数值来发送不同的值。</span><span>例如，假设一个函数引用<code>fn</code>可以接受1个、2个或者是3个实参，但是你总是希望在最后的位置里传输变量<code>x</code>：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// `fn` is set to some function reference</span></li><li><span class=\"hljs-comment\">// `x` exists with some value</span></li><li></li><li><span class=\"hljs-keyword\">if</span> (fn.length == <span class=\"hljs-number\">1</span>) {</li><li>    fn( x );</li><li>}</li><li><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fn.length == <span class=\"hljs-number\">2</span>) {</li><li>    fn( <span class=\"hljs-literal\">undefined</span>, x );</li><li>}</li><li><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fn.length == <span class=\"hljs-number\">3</span>) {</li><li>    fn( <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, x );</li><li>}</li></ul></code></pre><p class=\"note\"><span><code>length</code>属性是只读的，它是在函数声明的时候就已经确定。它应该被认为是一个元数据，因为它描述了函数的预期用途。</span></p><p><span>有一点需要注意的是，某些种类的形参列表变体可以使函数属性<code>length</code>返回的值与你预期的想象不同。别担心，我们将会在本章的后面来解释这些（ES6引入的）功能：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y = <span class=\"hljs-number\">2</span></span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">x,...args</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baz</span>(<span class=\"hljs-params\"> {a,b} </span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo.length;             <span class=\"hljs-comment\">// 1</span></li><li>bar.length;             <span class=\"hljs-comment\">// 1</span></li><li>baz.length;             <span class=\"hljs-comment\">// 1</span></li></ul></code></pre><p><span>如果你使用这些形式的形参，一定要小心，函数的<code>length</code>值可能会吓到你。</span></p><p><span>如何计算当前函数调用接受到的实参数量？这在以前是小事儿一桩，但现在情况变得稍微复杂了点。每个函数都有个<code>arguments</code>对象（类数组）用来保存对传入的每个参数的引用。然后你可以查看<code>arguments</code>的<code>length</code>参数来确定实际到底传入了多少个参数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-built_in\">arguments</span>.length );    <span class=\"hljs-comment\">// 2</span></li><li>}</li><li></li><li>foo( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> );</li></ul></code></pre><p><span>从ES5（具体来说是从严格模式）开始，<code>arguments</code>就已经开始被不推荐使用了，很多人也在实际中尽量避免使用它。但是它是永远不会被删除的——在JS中，无论这会多么方便，但我们“绝不”会打破JS向后的兼容性——但是由于各种原因我们强烈建议你在实际中尽量避免使用它。</span><span>但是，我个人是建议使用<code>arguments.length</code>的。当你需要关注传输进来的实参的数量的时候，但也仅在这个情况下，继续使用这个参数是没有问题的。未来的JS版本可能会添加一个功能，你可以在不依靠<code>arguments.length</code>的情况下来确定传递的实参数量。如果真的是这样，那么我们就可以完全抛弃使用<code>arguments</code>了。</span></p><p class=\"warning\"><span><strong>绝不</strong>要像<code>arguments[1]</code>这样直接用下标来访问实参。如果有必要，坚持只使用<code>arguments.length</code>吧。</span></p><p><span>除非……假如你传递的实参超过了你声明的形参，你要如何访问它们呢？对于这个问题，首先，请先退一步，然后问问你自己：“为什么我要这么做呢？”请你严肃而仔细的想一想。</span><span>这种情况很少发生，它不应该是你在编程的时候经常期望和依赖的东西。如果你发现自己确实遇到了这样的情况，我建议你花20分钟来尝试设计下与该函数不同的交互方式。即便它是例外，最好也为它命名额外的形参。</span><span>接受不确定的自变量函数签名<sup class=\"label\">注</sup>被称为可变函数，有很多人喜欢这种风格的函数设计，但是我想你会发现，通常而言，函数式编程者们一般都想避免这些可能。</span></p><p class=\"translator\"><span>函数签名，即 <em>Function signature</em>，又被称作 <em>Type signature</em>。它包含了参数的数量、类型和顺序，通常在重载解析期间使用它来选择在许多重载形式中调用正确的函数。</span><span>JavaScript中并没有函数签名以及函数重载功能，但是根据输入参数的不同进行不同的逻辑处理，在这一点上和函数签名的功能是比较类似的。</span></p><p><span>好了，在这一点上的阐述已经足够了。</span></p><p><span>有时候你会想要像类数组那样直接用下标来访问实参，发生这种情况很可能是因为并没有含有下标的标准化形参来接受你传输进去的实参，这时应该怎么办？</span><span>ES6来帮忙了！让我们用<code>...</code>运算符来声明我们的函数——它有着“扩展运算符”，“其余运算符”，或者“聚合运算符”（我比较喜欢这个）等等称呼。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z,...args</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span>看到形参列表里面的<code>...args</code>了吗？这是ES6中添加的新的声明形式，它将会告诉引擎收集（或者叫“聚合”）所有剩余的未分配给具名形参的实参，然后把它们放在一个名为<code>args</code>的数组之中。<code>args</code>将始终是个数组，即便它是个空的。但是它不会包括分配给<code>x</code>、<code>y</code>和<code>z</code>的形参值，它只会包括在前三个值以外的所有传递进来的值。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z,...args</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( x, y, z, args );</li><li>}</li><li></li><li>foo();                  <span class=\"hljs-comment\">// undefined undefined undefined []</span></li><li>foo( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> );         <span class=\"hljs-comment\">// 1 2 3 []</span></li><li>foo( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> );      <span class=\"hljs-comment\">// 1 2 3 [ 4 ]</span></li><li>foo( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> );   <span class=\"hljs-comment\">// 1 2 3 [ 4, 5 ]</span></li></ul></code></pre><p><span>所以，假如你<em>确实</em>想要设计一个能够接受可变实参计数值的函数的话，请使用<code>...args</code>（或者任何你喜欢的名字）吧。现在，你将有一个真正的，不会丢失参数的数组来访问这些实参了。</span></p><p><span>只是要注意这样的事情，<code>4</code>在<code>args</code>数组的下标<code>0</code>的位置，而不是下标<code>3</code>的位置。并且，它的<code>length</code>属性将不会包含<code>1</code>，<code>2</code>以及<code>3</code>。<code>...args</code>将会收集所有值，不过当然会除开<code>x</code>、<code>y</code>以及<code>z</code>。</span></p><p><span>你甚至<em>能够</em>直接在形参列表中使用<code>...</code>运算符，即便没有声明其他形式的形参：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">...args</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span>现在<code>args</code>将会是所有实参的聚合数组，无论它们是什么。而且你可以使用<code>args.length</code>来确定到底传入了多少个参数，你也可以安全的直接使用<code>args[1]</code>甚至是<code>args[317]</code>（如果你可以访问的话）。当然，你不要真的传入318个参数就是了。</span></p><p><span>说到ES6的好东西啊，这里还有些其他的你可能会想知道的关于函数实参和形参的技巧。有关该指令的更多信息，请参阅我的另一个本书《你不知道的JS：ES6以及更高版本》。</span></p><h3 id=\"实参的技巧\">实参的技巧</h3><p><span>如果你想把某数组中的所有值作为实参传递进函数调用中怎么办？</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">...args</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( args[<span class=\"hljs-number\">3</span>] );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> arr = [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> ];</li><li></li><li>foo( ...arr );                      <span class=\"hljs-comment\">// 4</span></li></ul></code></pre><p><span>我们同样可以使用我们的新朋友<code>...</code>，它不仅能用在形参列表中，还能用在函数调用的实参列表中。它在这种情况下的行为刚好相反，在形参列表中它将会将实参们都聚合起来；而在实参列表中，它将会把它们展开。所以，<code>arr</code>内的值们将会作为单独的参数传递给<code>foo(..)</code>调用。你看到这和传递整个<code>arr</code>数组的引用之间的区别了吗？</span></p><p><span>值得一提的是，<code>...</code>运算符和单独的值是可以混用的，像这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> arr = [ <span class=\"hljs-number\">2</span> ];</li><li></li><li>foo( <span class=\"hljs-number\">1</span>, ...arr, <span class=\"hljs-number\">3</span>, ...[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>] );      <span class=\"hljs-comment\">// 4</span></li></ul></code></pre><p><span><code>...</code>运算符的效果是对称的，在值列表（译注：在这里可以理解为赋值运算的右值，即赋值运算的数据源）中，它总是<em>展开</em>运算。而在进行被赋值的地方（译注：在这里可以理解为赋值运算的左值，即赋值运算的目标变量）——像是形参列表，因为实参总是会赋值给形参——它总是<em>聚合</em>运算。</span><span>无论你调用的是什么行为，<code>...</code>运算让参数数组使用起来更加容易了。想想使用<code>slice(..)</code>，<code>concat(..)</code>和<code>apply(..)</code>来摆弄参数数组的日子吧！我们终于可以和它们说再见了！</span></p><h3 id=\"形参的技巧\">形参的技巧</h3><p><span>从ES6起，形参可以使用默认值声明。在未向该形参传递实参值或者传递了<code>undefined</code>的情况下，默认赋值表达式将会代替原来的实参赋值给形参的表达式。</span></p><p><span>比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x = <span class=\"hljs-number\">3</span></span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( x );</li><li>}</li><li></li><li>foo();                  <span class=\"hljs-comment\">// 3</span></li><li>foo( <span class=\"hljs-literal\">undefined</span> );       <span class=\"hljs-comment\">// 3</span></li><li>foo( <span class=\"hljs-literal\">null</span> );            <span class=\"hljs-comment\">// null</span></li><li>foo( <span class=\"hljs-number\">0</span> );               <span class=\"hljs-comment\">// 0</span></li></ul></code></pre><p class=\"note\"><span>我们不会再在这里介绍更多细节了，不过我想要强调一点，默认值表达式是惰性的，这意味着直到必须运行它之前，它都是不会运行的，此外，它允许是任何合法的JS表达式，甚至是函数调用。这样的特性使得它有很多很酷的技巧。比如，你可以在形参列表中声明<code>x = required()</code>，然后在<code>required()</code>函数中简单的抛出错误<code>throw \"This argument is required.\"</code>，这样来确保使用者在调用函数的时候始终指定实参/形参。</span></p><p><span>在形参中我们还能使用另一种ES6的技巧，它叫做“<em>解构赋值(destructuring)</em>”。我们只会在这里简单的介绍一下，因为它的全部内容比起我们现在涉及到的知识而言要复杂的多。在这里我想再次提一下，关于它更详细的内容，请参考《ES6以及更高版本》这本书。</span></p><p><span>还记得我们在上面提到的接受了318个实参的函数<code>foo(..)</code>吗？</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">...args</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo( ...[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] );</li></ul></code></pre><p><span>如果我们想要改变这种交互方式，我们想要在函数调用中传入一个值数字组，而不是一个个单独的值，应该怎么做呢？只需要去掉两个<code>...</code>运算符就行了：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">args</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo( [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] );</li></ul></code></pre><p><span>看起来很简单吧。但是如果我们现在想要给传入的实参数组的前两个值各声明一个形参呢？因为我们没有单独传入实参，所以看起来我们似乎是做不到这种要求的。但是，解构赋值是可以的：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"> [x,y,...args] = [] </span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo( [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] );</li></ul></code></pre><p><span>你看到在形参列表中的<code>[..]</code>括号了吗？这就是数组的解构赋值。解构赋值是一种以声明语句的方式，来描述你希望看到的某些结构体（对象、数组等）的模式，以及如何对其各个部分进行分解（赋值）的方法。</span><span>在这个例子中，解构赋值告诉引擎在这个赋值位置（形参）中需要一个数组，并且数组的第一个值会被赋值给当前名为<code>x</code>的形参变量，第二值则会赋值给名为<code>y</code>的形参变量，而剩下的所有值将会被<em>聚合</em>到<code>args</code>之中。</span></p><p><span>你当然也可以像下面这样手动的做同样的事情：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">params</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> x = params[<span class=\"hljs-number\">0</span>];</li><li>    <span class=\"hljs-keyword\">var</span> y = params[<span class=\"hljs-number\">1</span>];</li><li>    <span class=\"hljs-keyword\">var</span> args = params.slice( <span class=\"hljs-number\">2</span> );</li><li></li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span>在这里我想开始揭示函数式编程的第一个原则，我们之后也将会反复强调下面这句话：<em>声明式的代码通常会比命令式的代码更容易理解。</em></span><span>声明式的代码，就像前面代码片段中的解构赋值，它只关注一段代码的结果应该是什么。命令式的代码，就像刚才显式的手动分配形参变量的做法，则更注重于它是如何获得结果的。如果你以后再来阅读这段代码的时候，你必须在头脑中模拟执行一遍这段代码，来了解结果到底是什么样子的。从这些代码当然也能看出结果，但它终归不是那么清晰明了。</span><span>无论语言和我们的库/框架让我们如何如何，只要有可能，<em>我们都应该努力写出声明式以及自解释性的代码</em>。</span></p><p><span>正如我们可以解构数组，我们同样也能够结构对象形参：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"> {x,y} = {} </span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( x, y );</li><li>}</li><li></li><li>foo( {</li><li>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">3</span></li><li>} );                    <span class=\"hljs-comment\">// undefined 3</span></li></ul></code></pre><p><span>我们把一个对象作为单个实参传递了进去，然后将之解构成了两个独立的形参<code>x</code>和<code>y</code>，它们都接受了传入对象与之对应的属性名的值。对象没有<code>x</code>这个属性并不是问题，就像你所想的那样，最终这个变量的值将会是<code>undefined</code>。</span><span>虽然形参是对象解构出来的一部分，但是我希望你能注意这个被传入<code>foo(..)</code>的对象本身。</span><span>使用像是<code>foo(undefined, 3)</code>这样正常的函数调用，参数的位置决定了从实参到形参的映射。我们将<code>3</code>放在了第二个位置上，所以它将会赋值给形参<code>y</code>。但是在这种使用了形参解构赋值的新式函数调用的情况下，映射是由对象属性来决定的，正如这里形参(<code>y</code>)将会被实参值<code>3</code>赋值。</span></p><p><span>我们没有在正常的函数调用中考虑<code>x</code>，因为事实上我们并不关心<code>x</code>。我们想要忽略它，所以我们必须要额外做一些事情，比如传递<code>undefined</code>值作为占位符。</span><span>一些语言对此行为有更为直接的功能：<em>命名实参</em>。换句话来说，在函数调用的时候可以直接标记实参，这就能直接指示它应该映射到哪个形参之中。JavaScript中没有命名实参，但是形参对象解构赋值是可以代替它的最好的功能。</span><span>使用对象解构赋值来传递参数，比起传递多个参数而言，对于函数式而言是有益处的。只需要一个形参（对象）的函数更容易与另一个单输出的函数相组合。我们将在后面详细解释这一点。</span></p><p><span>回想一下，计数值这个术语指的是一个函数想要接受多少个形参，计数值的值为<code>1</code>的函数也被称作一元函数。在函数式编程中，我们希望我们的函数尽可能的都是一元的，有时候我们甚至会使用各种函数技巧，把具有更多计数值的函数转换为一元的形式。</span></p><p class=\"note\"><span>在第三章，我们将会重新讨论这个命名实参解构赋值的技巧，来解决形参排序这个令人恼人的问题。</span></p><h2 id=\"根据输入而变化的函数\">根据输入而变化的函数</h2><p><span>思考下面的函数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y</span>) </span>{</li><li>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x == <span class=\"hljs-string\">\"number\"</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> y == <span class=\"hljs-string\">\"number\"</span>) {</li><li>        <span class=\"hljs-keyword\">return</span> x * y;</li><li>    }</li><li>    <span class=\"hljs-keyword\">else</span> {</li><li>        <span class=\"hljs-keyword\">return</span> x + y;</li><li>    }</li><li>}</li></ul></code></pre><p><span>显然，上面这个例子中的函数将会根据你传递的输入值而发生对应的变化。</span><span>比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li>foo( <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> );            <span class=\"hljs-comment\">// 12</span></li><li></li><li>foo( <span class=\"hljs-string\">\"3\"</span>, <span class=\"hljs-number\">4</span> );          <span class=\"hljs-comment\">// \"34\"</span></li></ul></code></pre><p><span>程序员这样定义函数的原因，是因为将不同的行为重载到单个函数中可能会更加方便。最著名的例子就是<code>$(..)</code>函数，它是由JS非常流行的的库jQuery提供的。这个“美元符号”的函数大约有十几种不同的行为——从DOM元素的查找到创建DOM之后为它添加加载完成的回调事件——这些都取决于你传递给它的参数。</span><span>我们在学习它的时候能感觉到它最为明显的优势，毕竟它的API实在是简单（只有一个<code>$(..)</code>函数）；然而它也有明显的缺点，那就是在阅读代码的时候，我们必须仔细检查传入的参数，然后再去解读这个调用将会做什么。</span><span>这种基于输入而表现出不同行为的重载函数的技术，被称做<em>随意多态(ad-hoc polymorphism)</em>。</span></p><p><span>这种设计模式还有另一种表现形式，那就是在不同的场景下使用它，将会具有不同的输出（更多的细节将会在下一部分中介绍）。</span></p><p class=\"warning\"><span>一定要小心这里的这种“便利性”的诱惑。因为这样的设计在短期看来可能是有很大优势的，但是它的长期成本可能并不怎么好看。</span></p><h1 id=\"函数的输出\">函数的输出</h1><p><span>在JavaScript中，函数总会返回一个值。这三个函数都具有相同的返回行为：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span>;</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baz</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;</li><li>}</li></ul></code></pre><p><span>假如你并没有为函数写<code>return</code>语句，或者是放了一个空的<code>return</code>语句，那么此时将会隐式的返回<code>undefined</code>值。</span><span>但是为了尽量贯彻函数式函数定义的精神——使用函数而不是过程——我们的函数应该总是有输出的，这意味着它应该显式的返回一个值，而且这个值不应该是<code>undefined</code>。</span></p><p><span><code>return</code>语句只能返回单个值。因此，如果你的函数需要返回多个值，你唯一可行的选择就是将它们聚合成一个复合值，比如数组或对象：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> retValue1 = <span class=\"hljs-number\">11</span>;</li><li>    <span class=\"hljs-keyword\">var</span> retValue2 = <span class=\"hljs-number\">31</span>;</li><li>    <span class=\"hljs-keyword\">return</span> [ retValue1, retValue2 ];</li><li>}</li></ul></code></pre><p><span>就像我们在形参中对数组/对象进行解构赋值那样，我们也可以在正常的赋值语句中这么做：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> retValue1 = <span class=\"hljs-number\">11</span>;</li><li>    <span class=\"hljs-keyword\">var</span> retValue2 = <span class=\"hljs-number\">31</span>;</li><li>    <span class=\"hljs-keyword\">return</span> [ retValue1, retValue2 ];</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> [ x, y ] = foo();</li><li><span class=\"hljs-built_in\">console</span>.log( x + y );           <span class=\"hljs-comment\">// 42</span></li></ul></code></pre><p><span>将多个值收集到数组（或者对象）中，把它们当作返回值返回，然后将这些值进行解构赋值，这是一种透明地表达函数多个输出的方式。</span></p><p class=\"note\"><span>如果你想要通过重构来避免一个函数拥有多个输出的情况，那么将函数拆分成2个甚至是多个单输出的函数会是一个好主意吗？忘了提醒你这件事情，这是我的疏忽。在此我的回答是，有时候是的，有时候却不是的。但是至少，你应该认真考虑一下。</span></p><h2 id=\"提前返回\">提前返回</h2><p><span><code>return</code>语句并不只是从函数返回一个值的语句，它也可以当作是一个流控制结构；函数将会在这里停止运行。因此当一个拥有多个<code>return</code>语句时，这也意味着这个函数拥有多个可能的出口，也意味着假如一个函数拥有多个输出路径，那么要理解函数的输出行为将会更加困难。</span><span>比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;</li><li></li><li>    <span class=\"hljs-keyword\">var</span> y = x / <span class=\"hljs-number\">2</span>;</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (y &gt; <span class=\"hljs-number\">3</span>) {</li><li>        <span class=\"hljs-keyword\">if</span> (x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> x;</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (y &gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> y;</li><li></li><li>    <span class=\"hljs-keyword\">return</span> x;</li><li>}</li></ul></code></pre><p><span>小测验：不要在浏览器中运行代码来作弊哟，请直接回答以下问题，<code>foo(2)</code>的返回值是多少？<code>foo(4)</code>呢？还有<code>foo(8)</code>以及<code>foo(12)</code>，以上函数调用的输出分别是多少？</span><span>你对你的答案有多少信心？你思考这个问题耗费了多少脑细胞呢？不怕告诉你，我的头两次尝试都以失败告终。</span></p><p><span>我认为这里在可读性方面的主要问题是在于，<code>return</code>不仅仅是返回了不同的值，还被当作了流控制的语句，用以在某种情况下提前退出函数。很明显，这里有更好的方式来进行流控制（<code>if</code>逻辑等），但是我认为也有办法让输出路径更加明显。</span></p><p class=\"note\"><span>这里的答案是<code>2</code>、<code>2</code>、<code>8</code>以及<code>13</code>。</span></p><p><span>思考下面这个版本的代码：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> retValue;</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (retValue == <span class=\"hljs-literal\">undefined</span> &amp;&amp; x &gt; <span class=\"hljs-number\">10</span>) {</li><li>        retValue = x + <span class=\"hljs-number\">1</span>;</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">var</span> y = x / <span class=\"hljs-number\">2</span>;</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (y &gt; <span class=\"hljs-number\">3</span>) {</li><li>        <span class=\"hljs-keyword\">if</span> (retValue == <span class=\"hljs-literal\">undefined</span> &amp;&amp; x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {</li><li>            retValue = x;</li><li>        }</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (retValue == <span class=\"hljs-literal\">undefined</span> &amp;&amp; y &gt; <span class=\"hljs-number\">1</span>) {</li><li>        retValue = y;</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (retValue == <span class=\"hljs-literal\">undefined</span>) {</li><li>        retValue = x;</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">return</span> retValue;</li><li>}</li></ul></code></pre><p><span>这个版本毫无疑问要更加啰嗦一点，但是我认为它遵循的逻辑却要显得更加清晰明了，每个可以给<code>retValue</code>赋值的分支中都将这个变量<em>保护</em>了起来，因为每个分支条件都会对这个变量是否已经被赋值做检查。</span><span>比起在函数中使用<code>return</code>来提前返回值，我通常会使用正常的流控制语句（<code>if</code>逻辑）来决定<code>retValue</code>的赋值。然后在最后直接<code>return retValue</code>。</span><span>我不是说你必须要无条件的使用单一的<code>return</code>，或者是不要提前使用<code>return</code>，我只是希望你能在使用<code>return</code>的时候小心点，因为它在函数中也是一种隐式的流控制结构。尝试找出最明确的方式来表达逻辑，通常而言，这才是最好的方式。</span></p><h2 id=\"没有返回的输出\">没有返回的输出</h2><p><span>在你编写的大部分代码中你可能试用过一种技术，虽然你可能从来没有注意到它。这个技术就是通过简单的改变外部变量来输出一些或者所有值。</span></p><p><span>还记得我们在上一章提到的 <em>f(x) = 2x<sup>2</sup> + 3</em> 函数吗？我们可以在JS中这么定义它：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> y;</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    y = (<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.pow( x, <span class=\"hljs-number\">2</span> )) + <span class=\"hljs-number\">3</span>;</li><li>}</li><li></li><li>foo( <span class=\"hljs-number\">2</span> );</li><li></li><li>y;                      <span class=\"hljs-comment\">// 11</span></li></ul></code></pre><p><span>我知道这是个非常简单的例子，我们能够很容易的使用<code>return</code>返回值的技术，来替代现在这样在函数内直接操作<code>y</code>变量的方式：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.pow( x, <span class=\"hljs-number\">2</span> )) + <span class=\"hljs-number\">3</span>;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> y = foo( <span class=\"hljs-number\">2</span> );</li><li></li><li>y;                      <span class=\"hljs-comment\">// 11</span></li></ul></code></pre><p><span>这两个函数能完成相同的任务，我们有什么理由一定要选择后者呢？是的，的确是有的。</span><span>这两种方法有一个很明显的区别，那就是后一个版本中使用了<code>return</code>语句来显式的输出了值；相对的，前者则是直接给变量<code>y</code>赋值，隐式的输出了这个值。你可能已经有了点感觉，通常而言，开发人员更喜欢显式的模式，而不是隐式的模式。</span><span>正如我们在<code>foo(..)</code>函数中直接对<code>y</code>赋值那样，改变外部作用域中的变量只是实现隐式输出的一种方法。现在还有个更微妙的例子，它是通过引用的方式来修改了非本地的值。</span></p><p><span>思考：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">list</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">0</span>;</li><li>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) {</li><li>        <span class=\"hljs-keyword\">if</span> (!list[i]) list[i] = <span class=\"hljs-number\">0</span>;</li><li></li><li>        total = total + list[i];</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">return</span> total;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> nums = [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">27</span>, , <span class=\"hljs-number\">84</span> ];</li><li></li><li>sum( nums );            <span class=\"hljs-comment\">// 124</span></li></ul></code></pre><p><span>这个函数最明显的输出就是<em>数组的和</em><code>124</code>，我们显式的返回了它。但是你找到另一个输出了吗？实时运行这个代码，然后检查<code>nums</code>数组吧。现在，你发现不同了吗？</span></p><p><span>本来在下标为<code>4</code>的位置是个<code>undefined</code>的空位，但现在那里却是个<code>0</code>。看起来无害的<code>list[i] = 0</code>操作却影响了外部的数组值，即便我们操作的是一个本地的<code>list</code>形参变量。</span><span>为什么？因为<code>list</code>的值实际上是对于<code>nums</code>引用值的引用复制，而并不是其数组内容<code>[1,3,9,...]</code>的值复制（译注：<code>list</code>数组的引用复制的这种行为一般称为浅复制）。因为JS对于数组、对象、函数使用的都是其引用以及引用的复制，我们从我们的函数中创建输出实在是非常容易，即便是因为某些意外。</span><span>这些隐式的函数输出在函数式编程的世界中有一个特殊的名称：副作用（side effects）。如果一个函数<em>没有任何副作用</em>，那么这个函数也有一个特殊的名称：纯函数（pure function）。我们会在后面的章节中更详细的讨论这个问题，但是我有个忠告，那就是我们更加偏爱于纯函数，而且应该尽可能的避免副作用。</span></p><h1 id=\"函数的函数\">函数的函数</h1><p><span>函数可以接收和返回任何类型的值。接收或返回一个或多个其他函数的函数具有一个特殊名称：<em>高阶函数(higher-order function)</em>。</span><span>看下面的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">forEach</span>(<span class=\"hljs-params\">list,fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) {</li><li>        fn( list[i] );</li><li>    }</li><li>}</li><li></li><li>forEach( [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">each</span>(<span class=\"hljs-params\">val</span>)</span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( val );</li><li>} );</li><li><span class=\"hljs-comment\">// 1 2 3 4 5</span></li></ul></code></pre><p><span><code>forEach(..)</code>就是一个高阶函数，因为它接受了一个函数作为实参。</span></p><p><span>高阶函数也能输出另一个函数，比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">msg</span>)</span>{</li><li>        <span class=\"hljs-built_in\">console</span>.log( msg );</li><li>    };</li><li></li><li>    <span class=\"hljs-keyword\">return</span> fn;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> f = foo();</li><li></li><li>f( <span class=\"hljs-string\">\"Hello!\"</span> );          <span class=\"hljs-comment\">// Hello!</span></li></ul></code></pre><p><span><code>return</code>也并不是唯一“输出”另一个函数的方式：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">msg</span>)</span>{</li><li>        <span class=\"hljs-built_in\">console</span>.log( msg );</li><li>    };</li><li></li><li>    bar( fn );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">func</span>) </span>{</li><li>    func( <span class=\"hljs-string\">\"Hello!\"</span> );</li><li>}</li><li></li><li>foo();                  <span class=\"hljs-comment\">// Hello!</span></li></ul></code></pre><p><span>把其他函数当做值，这就是高阶函数的定义。函数式程序员们一天到晚都在写这个东西！</span></p><h2 id=\"保持作用域\">保持作用域</h2><p><span>在所有的编程范式，特别是函数式之中，有一个非常强大的东西，那就是当函数在另一个函数的作用域内时，此时函数的行为是怎样的。内部的函数引用来自外部函数的变量，这一行为就被称为闭包。</span><span>从编程的角度来说，闭包就是函数能够记住且访问到在它自己作用域外部的变量的行为，甚至该函数是在别的作用域中运行的时候。</span></p><p><span>思考：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">msg</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>)</span>{</li><li>        <span class=\"hljs-built_in\">console</span>.log( msg );</li><li>    };</li><li></li><li>    <span class=\"hljs-keyword\">return</span> fn;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> helloFn = foo( <span class=\"hljs-string\">\"Hello!\"</span> );</li><li></li><li>helloFn();              <span class=\"hljs-comment\">// Hello!</span></li></ul></code></pre><p><span>在作用域<code>foo(..)</code>中的形参变量<code>msg</code>，它被内部的函数引用了。当<code>foo(..)</code>函数运行的时候，内部的函数就会被创建，此时这个内部生成的函数捕获了对变量<code>msg</code>的访问，并且在<code>return</code>之后仍然保持着这个访问。</span><span>一旦我们得到了<code>helloFn</code>，对函数<code>foo(..)</code>的引用已经完成，它的作用域应该已经消失了才对，当然这也就意味着变量<code>msg</code>也将会随之消失。但是并不会发生这种事情，因为内部函数有一个闭包覆盖了变量<code>msg</code>，从而保持了这个变量的存在。只要这个内部函数存在（现在它被在不同作用域的<code>helloFn</code>所引用），那变量<code>msg</code>也会随之存在。</span></p><p><span>我们来看看更多的关于闭包操作的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">person</span>(<span class=\"hljs-params\">id</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> randNumber = <span class=\"hljs-built_in\">Math</span>.random();</li><li></li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">identify</span>(<span class=\"hljs-params\"></span>)</span>{</li><li>        <span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">\"I am \"</span> + id + <span class=\"hljs-string\">\": \"</span> + randNumber );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> fred = person( <span class=\"hljs-string\">\"Fred\"</span> );</li><li><span class=\"hljs-keyword\">var</span> susan = person( <span class=\"hljs-string\">\"Susan\"</span> );</li><li></li><li>fred();                 <span class=\"hljs-comment\">// I am Fred: 0.8331252801601532</span></li><li>susan();                <span class=\"hljs-comment\">// I am Susan: 0.3940753308893741</span></li></ul></code></pre><p><span>内部函数<code>identify()</code>的闭包包含了两个变量，分别是形参<code>id</code>和内部变量<code>randNumber</code>。</span><span>闭包允许的访问不仅限于读取变量的原始值——它不仅仅是变量的快照，而更像是活动链接。你能够更新这个值，当前状态将会保持这个值，直到你下次访问它。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">runningCounter</span>(<span class=\"hljs-params\">start</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> val = start;</li><li></li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">current</span>(<span class=\"hljs-params\">increment = <span class=\"hljs-number\">1</span></span>)</span>{</li><li>        val = val + increment;</li><li>        <span class=\"hljs-keyword\">return</span> val;</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> score = runningCounter( <span class=\"hljs-number\">0</span> );</li><li></li><li>score();                <span class=\"hljs-comment\">// 1</span></li><li>score();                <span class=\"hljs-comment\">// 2</span></li><li>score( <span class=\"hljs-number\">13</span> );            <span class=\"hljs-comment\">// 15</span></li></ul></code></pre><p class=\"warning\"><span>这个问题我们将会在后面进行更详细的讨论，但是这个使用闭包来记住状态改变的例子，可能是你想要极力避免的。</span></p><p><span>如果你有一个操作需要两个输入，其中一个你现在就已经知道，但是另一个将会在之后指定，这时你就可以使用闭包来记住第一个输入：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeAdder</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">y</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> x + y;</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// we already know `10` and `37` as first inputs, respectively</span></li><li><span class=\"hljs-keyword\">var</span> addTo10 = makeAdder( <span class=\"hljs-number\">10</span> );</li><li><span class=\"hljs-keyword\">var</span> addTo37 = makeAdder( <span class=\"hljs-number\">37</span> );</li><li></li><li><span class=\"hljs-comment\">// later, we specify the second inputs</span></li><li>addTo10( <span class=\"hljs-number\">3</span> );           <span class=\"hljs-comment\">// 13</span></li><li>addTo10( <span class=\"hljs-number\">90</span> );          <span class=\"hljs-comment\">// 100</span></li><li></li><li>addTo37( <span class=\"hljs-number\">13</span> );          <span class=\"hljs-comment\">// 50</span></li></ul></code></pre><p><span>通常而言，<code>sum(..)</code>函数将会求出两个输入<code>x</code>和<code>y</code>的和。但是在这个例子中，我们先接收并保存（通过闭包）了<code>x</code>的值，而<code>y</code>的值将会在后面单独指定。</span></p><p class=\"note\"><span>这种在连续的函数调用中指定输入的技术在函数式编程中非常常见，它们有两种形式：<em>局部应用（Partial Application，也译作“偏应用”或“部分应用”）</em>和<em>局部套用（Currying，也译作“柯里化”）</em>。我们将会在之后的内容中详细介绍。</span></p><p><span>当然，由于函数在JS中也是一种值，我们当然也可以通过闭包来记住函数值。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatter</span>(<span class=\"hljs-params\">formatFn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">str</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> formatFn( str );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> lower = formatter( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatting</span>(<span class=\"hljs-params\">v</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> v.toLowerCase();</li><li>} );</li><li></li><li><span class=\"hljs-keyword\">var</span> upperFirst = formatter( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatting</span>(<span class=\"hljs-params\">v</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> v[<span class=\"hljs-number\">0</span>].toUpperCase() + v.substr( <span class=\"hljs-number\">1</span> ).toLowerCase();</li><li>} );</li><li></li><li>lower( <span class=\"hljs-string\">\"WOW\"</span> );             <span class=\"hljs-comment\">// wow</span></li><li>upperFirst( <span class=\"hljs-string\">\"hello\"</span> );      <span class=\"hljs-comment\">// Hello</span></li></ul></code></pre><p><span>比起在我们代码中分布在各处的<code>toUpperCase()</code>和<code>toLowerCase()</code>，函数式编程更鼓励我们用简单的函数来对这种行为进行封装。</span><span>具体的来说，我们创建了两个简单的一元函数<code>lower(..)</code>和<code>upperFirst(..)</code>，因为这些函数更容易连接到我们程序的其他功能。</span></p><p class=\"note\"><span>你发现了吗，其实这里可以直接用<code>upperFirst(..)</code>来调用<code>lower(..)</code>的。</span></p><p><span>我们会在本书的其他部分中大量的使用闭包，它可能是整个函数式编程中最为重要的基础实践。熟练的掌握它吧！</span></p><h1 id=\"语法\">语法</h1><p><span>在我们从这些函数入门开始之前，我们先花点时间来讨论一下函数相关的语法。</span><span>无论你是否同意，在这一节中的观点比起本书的其他部分而言，都充满了我个人的主观倾向和偏好。虽然很多人觉得它们是比较绝对的准则，但它们也的确是我个人非常主观结论。最终，是否接受他们由你自己来决定。</span></p><h2 id=\"名字之中都有什么?\">名字之中都有什么?</h2><p><span>从语法上来讲，函数声明需要包含一个名称：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">helloMyNameIs</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span>但是，函数表达式却有具名和匿名两种形式：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li>foo( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">namedFunctionExpr</span>(<span class=\"hljs-params\"></span>)</span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>} );</li><li></li><li>bar( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{    <span class=\"hljs-comment\">// &lt;-- look, no name!</span></li><li>    <span class=\"hljs-comment\">// ..</span></li><li>} );</li></ul></code></pre><p><span>话说回来，我们所谓的匿名到底指的是什么？具体来说是这样的，函数有一个<code>name</code>的属性，它将会保存函数在语法上给出的名称的字符串，例如<code>helloMyNameIs</code>和<code>namedFunctionExpr</code>。<code>name</code>属性最重要的功能就是，当控制台/开发人员在追踪堆栈（通常来自于异常）时，JS环境将会列出函数列表，函数有了各自的名字，查询起来非常方便。</span><span>而匿名函数通常只会显示<code>(anonymous function)</code>。</span></p><p><span>如果你曾经调试过跟踪异常堆栈的JS程序的话，你可能已经感受过看到一行接一行<code>(anonymous function)</code>时的痛苦。这个列表对于开发者而言毫无意义，因为它不能提供关于异常来源的任何线索。</span></p><p><span>从ES6开始，匿名表达式有了<em>名称推断(name inferencing)</em>的帮助，例如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};</li><li></li><li>x.name;         <span class=\"hljs-comment\">// x</span></li></ul></code></pre><p><span>如果引擎能够猜到你可能想要该函数采用什么名称，它就会为匿名函数添加名称。</span><span>但是请注意，并非所有的语法形式都能够从名称推断中获益，在下面这段代码中展示了一个非常常见的函数表达式，它将会作为一个参数被另一个函数调用：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( fn.name );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};</li><li></li><li>foo( x );               <span class=\"hljs-comment\">// x</span></li><li>foo( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{} );    <span class=\"hljs-comment\">//</span></li></ul></code></pre><p><span>当无法根据周围的语法直接推断名称时，名称属性将会保持为空字符串。在跟踪堆栈时，这样的函数将会被报告为<code>(anonymous function)</code>。</span><span>当函数具名时，除开调试还有别的优势。首先句法名称（也称为词法名称）对于内部的自引用很有用。自引用对于递归（不管是异步还是同步）都是必要的，并且对于事件处理程序也有帮助。</span></p><p><span>思考下面几个很容易出现的场景：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// sync recursion:</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findPropIn</span>(<span class=\"hljs-params\">propName,obj</span>) </span>{</li><li>    <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">undefined</span> || <span class=\"hljs-keyword\">typeof</span> obj != <span class=\"hljs-string\">\"object\"</span>) <span class=\"hljs-keyword\">return</span>;</li><li></li><li>    <span class=\"hljs-keyword\">if</span> (propName <span class=\"hljs-keyword\">in</span> obj) {</li><li>        <span class=\"hljs-keyword\">return</span> obj[propName];</li><li>    }</li><li>    <span class=\"hljs-keyword\">else</span> {</li><li>        <span class=\"hljs-keyword\">let</span> props = <span class=\"hljs-built_in\">Object</span>.keys( obj );</li><li>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; props.length; i++) {</li><li>            <span class=\"hljs-keyword\">let</span> ret = findPropIn( propName, obj[props[i]] );</li><li>            <span class=\"hljs-keyword\">if</span> (ret !== <span class=\"hljs-literal\">undefined</span>) {</li><li>                <span class=\"hljs-keyword\">return</span> ret;</li><li>            }</li><li>        }</li><li>    }</li><li>}</li></ul></code></pre><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// async recursion:</span></li><li>setTimeout( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">waitForIt</span>(<span class=\"hljs-params\"></span>)</span>{</li><li>    <span class=\"hljs-comment\">// does `it` exist yet?</span></li><li>    <span class=\"hljs-keyword\">if</span> (!o.it) {</li><li>        <span class=\"hljs-comment\">// try again later</span></li><li>        setTimeout( waitForIt, <span class=\"hljs-number\">100</span> );</li><li>    }</li><li>}, <span class=\"hljs-number\">100</span> );</li></ul></code></pre><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// event handler unbinding</span></li><li><span class=\"hljs-built_in\">document</span>.getElementById( <span class=\"hljs-string\">\"onceBtn\"</span> )</li><li>    .addEventListener( <span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleClick</span>(<span class=\"hljs-params\">evt</span>)</span>{</li><li>        <span class=\"hljs-comment\">// unbind event</span></li><li>        evt.target.removeEventListener( <span class=\"hljs-string\">\"click\"</span>, handleClick, <span class=\"hljs-literal\">false</span> );</li><li></li><li>        <span class=\"hljs-comment\">// ..</span></li><li>    }, <span class=\"hljs-literal\">false</span> );</li></ul></code></pre><p><span>在所有的这些情况下，具名函数的名字都是一个有用且可靠的内部自引用。</span><span>此外，即使是在具有单线程函数的简单情况下，命名它们也能让代码更好的解释自身，就是说这个函数对于之前没有阅读过它的人而言会更容易阅读：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li>people.map( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPreferredName</span>(<span class=\"hljs-params\">person</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName;</li><li>} )</li><li><span class=\"hljs-comment\">// ..</span></li></ul></code></pre><p><span>函数名字<code>getPreferredName(..)</code>告诉了读者，这是个有关映射操作的函数，而从函数本身的代码来看，这个操作的特征并不怎么明显。所以名称标签有助于提高代码的可读性。</span></p><p><span>匿名函数表达式在IIFEs（立即调用函数表达式）中也很常见：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li></li><li>    <span class=\"hljs-comment\">// look, I'm an IIFE!</span></li><li></li><li>})();</li></ul></code></pre><p><span>你可能几乎从没看到IIFE使用具名函数的函数表达式，但它们应该这么做。为什么？所有的原因我们上面已经介绍过了，堆栈跟踪调试，可靠的自引用和更好的可读性。如果你不能给你的IIFE命名任何名字，那么至少请直接使用<em>IIFE</em>这个单词：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IIFE</span>(<span class=\"hljs-params\"></span>)</span>{</li><li></li><li>    <span class=\"hljs-comment\">// You already knew I was an IIFE!</span></li><li></li><li>})();</li></ul></code></pre><p><span>这就是我说<strong>具名函数比起匿名函数而言总是更具优势</strong>的原因。但事实上我会说，到目前为止，基本上没有匿名函数比具名函数更好的情况，匿名函数对于它们具名的同行而言，没有任何优势。</span><span>但是写匿名函数实在是比较容易，因为要是写具名函数的话，我们就必须集中注意力给函数指定一个名字。</span><span>说实话，我和其他人一样内疚，我也不喜欢和命名作斗争。命名的时候，最开始的3、4个名字通常都不怎么样，我必须一遍又一遍的重命名它们，相比之下我更愿意使用一个好的匿名函数表达式。</span></p><p><span>但这其实是<em>轻松编写</em>和<em>痛苦阅读</em>之间的交易，这并不是个划算的交易。懒惰或者缺乏创造力并不足以构成你不想给函数命名的借口。</span><span><strong>给你的每个单函数命名吧。</strong>如果你坐在那里，但却不能为你的函数拿出一个好名字，我觉得你可能并不完全理解这个函数的目的——或者它太过宽泛或抽象。我强烈建议你重新设计这个函数，直到它变得更加清楚。到那时，名字自然而然的就出现了。</span><span>我可以从我个人的经验中证明这一点，能够对某函数命名的很好，这通常需要我很好的理解它，为了达到这一点我甚至经常重构它们，以提高可读性和可控性。这样的投资是值得的。</span></p><h2 id=\"没有function的函数\">没有<code>function</code>的函数</h2><p><span>到目前为止，我们一直使用完整规范语法的函数，但是你肯定也听说了有关ES6的<code>=&gt;</code>箭头函数的相关小道消息。</span></p><p><span>比较下面的代码：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li>people.map( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPreferredName</span>(<span class=\"hljs-params\">person</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName;</li><li>} )</li><li><span class=\"hljs-comment\">// ..</span></li><li></li><li>people.map( <span class=\"hljs-function\"><span class=\"hljs-params\">person</span> =&gt;</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName );</li></ul></code></pre><p><span>哇~</span><span>关键字<code>function</code>不见了，还有<code>return</code>、<code>()</code>圆括号、<code>{}</code>花括号，还有<code>;</code>分号都不见了！对于这些所有东西，我们仅仅用了一个胖胖的箭头符号<code>=&gt;</code>来替换它们。</span><span>但是我们还省略了另一个东西。你找到了吗？函数名<code>getPreferredName</code>，也被省略了。</span><span>那就对了，<code>=&gt;</code>箭头函数在词法规定上就是匿名的，没有办法给它一个名字。它们的名字可以像普通函数那样被推断，但是最常见的函数表达式作为值的情况将同样不会得到任何帮助。</span><span>如果出于某种原因，<code>person.nicknames</code>并没有被定义，此时就会抛出异常，这意味着在你跟踪堆栈的时候，位于顶端的一定是<code>(anonymous function)</code>。额……</span><span>老实说，<code>=&gt;</code>箭头函数的匿名性就是它的罩门，至少对我而言是这样。我不能接受无法命名的特性，这样的代码将会很难阅读，更难调试，也不能自我引用。</span><span>但这还不算最糟糕的，最麻烦的是你必须要面对的另一个问题。在不同的场景下，你的函数定义必须要涉及一系列微妙的句法变化。我并不打算在这里详细的介绍它们，但这里有个简单的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li>people.map( <span class=\"hljs-function\"><span class=\"hljs-params\">person</span> =&gt;</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName );</li><li></li><li><span class=\"hljs-comment\">// multiple parameters? need ( )</span></li><li>people.map( <span class=\"hljs-function\">(<span class=\"hljs-params\">person,idx</span>) =&gt;</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName );</li><li></li><li><span class=\"hljs-comment\">// parameter destructuring? need ( )</span></li><li>people.map( <span class=\"hljs-function\">(<span class=\"hljs-params\">{ person }</span>) =&gt;</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName );</li><li></li><li><span class=\"hljs-comment\">// parameter default? need ( )</span></li><li>people.map( <span class=\"hljs-function\">(<span class=\"hljs-params\">person = {}</span>) =&gt;</span> person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName );</li><li></li><li><span class=\"hljs-comment\">// returning an object? need ( )</span></li><li>people.map( <span class=\"hljs-function\"><span class=\"hljs-params\">person</span> =&gt;</span></li><li>    ({ <span class=\"hljs-attr\">preferredName</span>: person.nicknames[<span class=\"hljs-number\">0</span>] || person.firstName })</li><li>);</li></ul></code></pre><p><span><code>=&gt;</code>运算符在函数式的世界中备受推崇是有原因的，主要是因为它是个完全遵循于数学形式的函数符号，尤其是在像<code>Haskell</code>这样的函数式编程语言中，我们就是使用形如<code>=&gt;</code>的箭头函数语法来和数学符号进行交流的。</span><span>从更深入的角度来说，我建议赞成<code>=&gt;</code>的主要理由是这样的，通过使用更轻量级的语法，来减少函数间的视觉边界。这会让我们使用简单的函数表达式，就像我们使用惰性表达式那样——这是另一个函数式编程人员最喜欢的东西。</span><span>我认为大多数函数式编程人员并不会太关注这些问题，他们喜欢匿名函数，他们喜欢简洁的语法。但就像我之前所说的：这由你自己来决定。</span></p><p class=\"note\"><span>尽管我并不喜欢在我的程序中使用<code>=&gt;</code>，但是在本书的其它部分中，我们将会在许多地方使用它——特别是当我们提供典型的函数式应用程序时——我们将会首选更简洁的，尤其是对有限的物理空间有所优化的代码片段。是否使用这种方法将会影响代码的可读性。当然，这也得你自己来选择。</span></p><h1 id=\"这(This)是什么？\">这(<code>This</code>)是什么？</h1><p><span>如果你不熟悉JavaScript中<code>this</code>的绑定规则，我建议你去看看我的《你不知道的JS：This和对象原型》一书。在本节中，我假设你知道在函数的调用时如何确定<code>this</code>（四规则之一）。如果你对<code>this</code>仍然有些模糊，那这里有个好消息要告诉你——如果你试图使用函数式编程，那么你就不应该使用<code>this</code>。</span><span>JavaScript的<code>function</code>有一个<code>this</code>关键字，它会在每个函数被调用的时候自动绑定。<code>this</code>这个关键字可以用很多种不同的方式来描述，但我更喜欢说，它为函数提供了一个运行的上下文对象。</span><span><code>this</code>也是函数的一个隐式的形参输入。</span></p><p><span>思考：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.x + <span class=\"hljs-keyword\">this</span>.y;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> context = {</li><li>    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>,</li><li>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span></li><li>};</li><li></li><li>sum.call( context );        <span class=\"hljs-comment\">// 3</span></li><li></li><li>context.sum = sum;</li><li>context.sum();              <span class=\"hljs-comment\">// 3</span></li><li></li><li><span class=\"hljs-keyword\">var</span> s = sum.bind( context );</li><li>s();                        <span class=\"hljs-comment\">// 3</span></li></ul></code></pre><p><span>当然，如果<code>this</code>可以被隐式的输入到函数中，那么相同的上下文对象当然也可以作为显示的实参输入：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">ctx</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> ctx.x + ctx.y;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> context = {</li><li>    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>,</li><li>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span></li><li>};</li><li></li><li>sum( context );</li></ul></code></pre><p><span>看起来要简单多了吧。这样的代码在函数式编程中更容易处理，在将多个函数连接在一起的情况下也显得更简单。或者在输入全是显式的情况下，使用我们将在下一章中介绍的输入竞争技术。上面这几种技术，在输入都是像<code>this</code>这样的隐式输入的情况下将会十分的尴尬，当然这也取决于应用场景。</span><span>我们可以在这个基于<code>this</code>的系统中使用其他技巧，比如说<em>原型委托</em>（更多的细节请参考《this与对象原型》）：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> Auth = {</li><li>    authorize() {</li><li>        <span class=\"hljs-keyword\">var</span> credentials = <span class=\"hljs-keyword\">this</span>.username + <span class=\"hljs-string\">\":\"</span> + <span class=\"hljs-keyword\">this</span>.password;</li><li>        <span class=\"hljs-keyword\">this</span>.send( credentials, resp =&gt; {</li><li>            <span class=\"hljs-keyword\">if</span> (resp.error) <span class=\"hljs-keyword\">this</span>.displayError( resp.error );</li><li>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">this</span>.displaySuccess();</li><li>        } );</li><li>    },</li><li>    send(<span class=\"hljs-comment\">/* .. */</span>) {</li><li>        <span class=\"hljs-comment\">// ..</span></li><li>    }</li><li>};</li><li></li><li><span class=\"hljs-keyword\">var</span> Login = <span class=\"hljs-built_in\">Object</span>.assign( <span class=\"hljs-built_in\">Object</span>.create( Auth ), {</li><li>    doLogin(user,pw) {</li><li>        <span class=\"hljs-keyword\">this</span>.username = user;</li><li>        <span class=\"hljs-keyword\">this</span>.password = pw;</li><li>        <span class=\"hljs-keyword\">this</span>.authorize();</li><li>    },</li><li>    displayError(err) {</li><li>        <span class=\"hljs-comment\">// ..</span></li><li>    },</li><li>    displaySuccess() {</li><li>        <span class=\"hljs-comment\">// ..</span></li><li>    }</li><li>} );</li><li></li><li>Login.doLogin( <span class=\"hljs-string\">\"fred\"</span>, <span class=\"hljs-string\">\"123456\"</span> );</li></ul></code></pre><p class=\"note\"><span><code>Object.assign(..)</code>是一个ES6+的小工具，它的功能是对一个或者多个源对象执行属性的浅复制，并把复制的键值对放置到单个的目标对象中：<code>Object.assign( target, source1, ... )</code>。</span></p><p><span>如果你无法理解这段代码的意思，我来稍微解释下它做了什么：我们有两个独立的对象<code>Login</code>和<code>Auth</code>，并且<code>Login</code>对<code>Auth</code>执行了事件委托。通过委托和隐式的<code>this</code>上下文共享，这两个对象在<code>this.authorize()</code>函数调用期间被<em>虚拟</em>的合并了起来，所以在<code>Auth.authorize(..)</code>函数中，属性/方法通过<code>this</code>实现了动态共享。</span><span><em>this</em>由于各种原因并不符合函数式编程的各种原则，但它明显是一个隐式的共享。我们可以更为显式的描述它，并让它在函数式的方向中更容易使用：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// ..</span></li><li></li><li>authorize(ctx) {</li><li>    <span class=\"hljs-keyword\">var</span> credentials = ctx.username + <span class=\"hljs-string\">\":\"</span> + ctx.password;</li><li>    Auth.send( credentials, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onResp</span>(<span class=\"hljs-params\">resp</span>)</span>{</li><li>        <span class=\"hljs-keyword\">if</span> (resp.error) ctx.displayError( resp.error );</li><li>        <span class=\"hljs-keyword\">else</span> ctx.displaySuccess();</li><li>    } );</li><li>}</li><li></li><li><span class=\"hljs-comment\">// ..</span></li><li></li><li>doLogin(user,pw) {</li><li>    Auth.authorize( {</li><li>        <span class=\"hljs-attr\">username</span>: user,</li><li>        <span class=\"hljs-attr\">password</span>: pw</li><li>    } );</li><li>}</li><li></li><li><span class=\"hljs-comment\">// ..</span></li></ul></code></pre><p><span>从我的角度来看，问题并不在于使用对象来组织行为，而是我们试图使用隐式的输入而不是显式的。当我戴着函数式编程的帽子的时候，我想我还是把<code>this</code>这东西放在架子上比较好。</span></p><h2 id=\"总结\">总结</h2><p><span>函数们是很强大的。</span><span>但是我们应该对函数到底是什么了若指掌。它不仅仅只是语句/操作的集合。具体来说函数需要一个或者多个输入（理想情况下只有一个）和输出。</span><span>函数内部的函数可以将外部变量闭包，并在之后依旧保持着它们的值。这是所有编程中最重要的概念之一，这也是函数式编程的基础。</span><span>小心匿名函数，尤其是<code>=&gt;</code>箭头函数。它们方便写作，但同时也将这部分成本从作者转移到了读者。我们在这里研究函数式编程的原因是为了编写更高可读性的代码，所以不要那么快的跳入那个潮流之中。</span><span>不要使用<code>this</code>，不要。</span></p>"}