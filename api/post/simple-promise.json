{"name":"simple-promise","path":"/post/simple-promise","title":"“简单”的Promise","category":"软件设计","date":["2016","10","20"],"tag":["JavaScript","规范","异步"],"layout":"post","toc":[{"tocTitle":"简述","bolt":"BE7AE80E8BFB0"},{"tocTitle":"构造函数","bolt":"BE69E84E980A0E587BDE695B0"},{"tocTitle":"resolve和reject","bolt":"BresolveE5928Creject"},{"tocTitle":"then方法","bolt":"BthenE696B9E6B395"},{"tocTitle":"运行原理","bolt":"BE8BF90E8A18CE58E9FE79086","child":[{"tocTitle":"同步过程","bolt":"BE5908CE6ADA5E8BF87E7A88B","parent":"BE8BF90E8A18CE58E9FE79086"},{"tocTitle":"异步过程","bolt":"BE5BC82E6ADA5E8BF87E7A88B","parent":"BE8BF90E8A18CE58E9FE79086"},{"tocTitle":"小测验","bolt":"BE5B08FE6B58BE9AA8C","parent":"BE8BF90E8A18CE58E9FE79086"}]},{"tocTitle":"EnqueueJob","bolt":"BEnqueueJob"},{"tocTitle":"总结","bolt":"BE680BBE7BB93"}],"excerpt":["Promise是在ES6引入的，它的出现是为了解决JavaScript在异步编程上的缺陷。不仅解决了回调金字塔，还能够让我们更好的控制异步程序的流程。但我在使用它的过程中，却总觉得实在是有点难以理解，虽然它可以取消回调，但是它本身却又是依赖回调实现的，使用过程中各个函数跳来跳去的，实在是让我感到头晕。即便是在阅读了规范之后也觉得有点云里雾里，于是乎就决定自己尝试实现一个简单的Promise，以增进对它的理解。本文就是个人对于Promise的笔记。"],"next":{"path":"/post/functional-light-js-zh-ch-01","title":"为什么需要函数式编程？"},"prev":{"path":"/post/++[]-++[[]][0]","title":"++[] 与 ++[[]][0]"},"content":"<p class=\"warning\"><span>如果你对<code>Promise</code>不太了解，我建议你先去看看它是如何使用的：<a href=\"http://es6.ruanyifeng.com/#docs/promise\">ES6入门：Promise对象</a>。</span><span>本文参考的规范是<code>ES6</code>而不是<code>Promise/A+</code>，其实它们都大同小异，只是在某些细节上有些区别。</span><span>另外，本文虽然是参考了规范，但并不是完全按照规范的步骤来进行实现的。规范中为了兼容各种情况，有着大量的类型、状态、格式检查，本文只为了展示原理，所以代码只会保留最低限度的错误检查。</span></p><h1 id=\"BE7AE80E8BFB0\">简述</h1><p><span>在这里我们只考虑实现一个最为简单的<code>Promise</code>类，它只有构造函数本身以及<code>then</code>方法。</span><span><code>Promise</code>最为常见的用法就是将异步方法用<code>then</code>链式调用串联到一起，既然是这样的结构，那么很明显<code>then</code>方法最后必定会返回<code>Promise</code>类。既然Promise主要是用于处理异步编程时候的回调问题，那么在处理链式调用的时候必定会先把所有的异步回调按照顺序存起来，然后在某个时间点取出运行。</span><span>这么说起来，似乎Promise的运行方式和其他涉及异步的库很像，都是类似的手工管理堆栈的编程方式。不过Promise不一样的地方就是在于，它取出回调并运行之的契机是在于前一个Promise的状态。</span><span>这样的话，<code>Promise</code>的结构就并不是纯粹的堆栈了，它更像是链表，从第一个<code>Promise</code>开始，每个<code>then</code>都会返回一个新的<code>Promise</code>，它们一环套一环将所有的回调串联了起来。</span></p><p class=\"note\"><span><code>Promise</code>是异步函数，所以不要陷入同步运行的思维定势之中，尤其不要把回调和<code>Promise</code>本身混淆了，把回调当作是普通的参数就行了。<code>Promise</code>本身只是起着将回调串联起来的任务，回调函数的运行在绝大部分情况下和<code>Promise</code>本身并不是同步的。</span></p><p><span>有了上述的感性认识，下面我们就来实现一个<code>Promise</code>吧。</span></p><h1 id=\"BE69E84E980A0E587BDE695B0\">构造函数</h1><p><span>按照<code>ES6</code>的规范，构造<code>Promise</code>类的实例是下面这样的：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ... some code</span></li><li></li><li>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-comment\">/* 异步操作成功 */</span>){</li><li>        resolve(value);</li><li>    } <span class=\"hljs-keyword\">else</span> {</li><li>        reject(error);</li><li>    }</li><li>});</li></ul></code></pre><p><span>所以，我们使用通用的构造函数方式来构建<code>Promise</code>类就行了：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Promise</span>(<span class=\"hljs-params\">executor</span>) </span>{</li><li>    <span class=\"hljs-comment\">//code..</span></li><li>}</li><li><span class=\"hljs-built_in\">Promise</span>.prototyoe.then = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>{</li><li>    <span class=\"hljs-comment\">//code..</span></li><li>}</li></ul></code></pre><p class=\"note\"><span>当然，你要是想用<code>class</code>也没问题，效果是一样的。</span></p><p><span>那么，接下来就要搬出规范了，来看看规范对于<code>Promise</code>的构造函数是如何描述的：</span></p><blockquote><p><span><strong>Promise</strong> ( <em>executor</em> )</span></p><p><span>When the Promise function is called with argument <em>executor</em>, the following steps are taken:</span></p><ol><li><p><span>If NewTarget is undefined, throw a TypeError exception.</span></p></li><li><p><span>If IsCallable(executor) is false, throw a TypeError exception.</span></p></li><li><p><span>Let promise be ? OrdinaryCreateFromConstructor(NewTarget, \"%PromisePrototype%\", « [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] »).</span></p></li><li><p><span>Set promise.[[PromiseState]] to \"pending\".</span></p></li><li><p><span>Set promise.[[PromiseFulfillReactions]] to a new empty List.</span></p></li><li><p><span>Set promise.[[PromiseRejectReactions]] to a new empty List.</span></p></li><li><p><span>Set promise.[[PromiseIsHandled]] to false.</span></p></li><li><p><span>Let resolvingFunctions be CreateResolvingFunctions(promise).</span></p></li><li><p><span>Let completion be Call(executor, undefined, « resolvingFunctions.[[Resolve]], resolvingFunctions.[[Reject]] »).</span></p></li><li><p><span>If completion is an abrupt completion, then</span></p></li><li><p><span>Perform ? Call(resolvingFunctions.[[Reject]], undefined, « completion.[[Value]] »).</span></p></li><li><p><span>Return promise.</span></p></li></ol></blockquote><p><span>我们挨着解释，<code>NewTarget</code>就是指<code>this</code>，当它等于<code>undefined</code>的时候抛出类型错误，什么时候<code>this</code>会等于<code>undefined</code>？使用构造函数的时候忘了用<code>new</code>就会这样。</span><span><code>IsCallable</code>方法是判断输入函数是否能够被调用，这是规范中内部的抽象方法，我们实际中可以直接判断它是不是函数就行了。</span><span>第3步就是创造当前实例的内部属性，我们在这里简化操作，就直接将这些属性挂在对象内部了。4、5、6、7都是属性赋值，不多说。</span><span>第8步使用<code>CreateResolvingFunctions</code>方法返回了一个对象，这个对象内部包含了<code>Promise</code>中的<code>Resolve</code>和<code>Reject</code>函数。这里创建出来的两个函数非常<code>特殊</code>，至于它们特殊在哪里，我先卖个关子，之后再告诉大家。</span><span>第9、10、11步是把生成的<code>Resolve</code>和<code>Reject</code>函数当作参数输入<code>executor</code>，并运行<code>executor</code>。如果运行出错，那么直接运行<code>Reject</code>。</span><span>最后返回当前对象。</span></p><p><span>那么，根据以上的规范，我们就能写出构造函数的基本框架了：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// 是否是函数</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isFunction</span>(<span class=\"hljs-params\">func</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-keyword\">typeof</span> func === <span class=\"hljs-string\">\"function\"</span>);</li><li>}</li><li><span class=\"hljs-comment\">// 创建Resolve和reject函数</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createResolvingFunctions</span>(<span class=\"hljs-params\">promise</span>) </span>{</li><li></li><li>    <span class=\"hljs-comment\">//code..</span></li><li></li><li>    <span class=\"hljs-keyword\">return</span>({</li><li>        <span class=\"hljs-attr\">resolve</span>: resolve,</li><li>        <span class=\"hljs-attr\">reject</span>: reject</li><li>    });</li><li>}</li><li><span class=\"hljs-comment\">// 构造函数</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Promise</span>(<span class=\"hljs-params\">executor</span>) </span>{</li><li>    <span class=\"hljs-keyword\">this</span>.PromiseState = <span class=\"hljs-string\">'pending'</span>;</li><li>    <span class=\"hljs-keyword\">this</span>.PromiseFulfillReactions = [];</li><li>    <span class=\"hljs-keyword\">this</span>.PromiseRejectReactions = [];</li><li></li><li>    <span class=\"hljs-keyword\">const</span> resolvingFunctions = createResolvingFunctions(<span class=\"hljs-keyword\">this</span>);</li><li></li><li>    <span class=\"hljs-keyword\">try</span> {</li><li>        executor(</li><li>            resolvingFunctions.resolve,</li><li>            resolvingFunctions.reject</li><li>        );</li><li>    } <span class=\"hljs-keyword\">catch</span> (e) {</li><li>        resolvingFunctions.reject(e);</li><li>    }</li><li>}</li></ul></code></pre><p><span>在这里，因为<code>IsCallable</code>方法之后还会陆续用上，所以我把它单独抽了出来，改名字叫<code>isFunction</code>，实际上里面就是直接用<code>typeof</code>判断是不是函数。</span><span><code>createResolvingFunctions</code>函数就是上面提到的那个特殊函数，最后返回了一个包含<code>resolve</code>和<code>reject</code>两个函数的对象。</span><span><code>[[ ]]</code>这样的内部属性直接以对象属性的形式挂在了<code>this</code>上面，其中<code>PromiseState</code>就是指当前状态，而<code>PromiseFulfillReactions</code>和<code>PromiseRejectReactions</code>就是两种回调的队列。</span></p><h1 id=\"BresolveE5928Creject\"><code>resolve</code>和<code>reject</code></h1><p><span>这两个函数将会作为参数传递到<code>executor</code>函数中运行，它们的作用就是让我们在异步函数中改变当前<code>Promise</code>实例状态。还是先来看看它们的规范：</span></p><blockquote><p><span>Promise <strong>Reject</strong> Functions</span></p><p><span>When a promise reject function <em>F</em> is called with argument <em>reason</em>, the following steps are taken:</span></p><ol><li><p><span>Assert: F has a [[Promise]] internal slot whose value is an Object.</span></p></li><li><p><span>Let promise be F.[[Promise]].</span></p></li><li><p><span>Let alreadyResolved be F.[[AlreadyResolved]].</span></p></li><li><p><span>If alreadyResolved.[[Value]] is true, return undefined.</span></p></li><li><p><span>Set alreadyResolved.[[Value]] to true.</span></p></li><li><p><span>Return RejectPromise(promise, reason).</span></p></li></ol></blockquote><p><span>可以看到，在这里面只是做了些值检查，然后就跳转到了<code>RejectPromise</code>方法。</span></p><blockquote><p><span>Promise <strong>Resolve</strong> Functions</span></p><p><span>When a promise resolve function <em>F</em> is called with argument <em>resolution</em>, the following steps are taken:</span></p><ol><li><p><span>Assert: F has a [[Promise]] internal slot whose value is an Object.</span></p></li><li><p><span>Let promise be F.[[Promise]].</span></p></li><li><p><span>Let alreadyResolved be F.[[AlreadyResolved]].</span></p></li><li><p><span>If alreadyResolved.[[Value]] is true, return undefined.</span></p></li><li><p><span>Set alreadyResolved.[[Value]] to true.</span></p></li><li><p><span>If SameValue(resolution, promise) is true, then</span></p><ol><li><p><span>Let selfResolutionError be a newly created TypeError object.</span></p></li><li><p><span>Return RejectPromise(promise, selfResolutionError).</span></p></li></ol></li><li><p><span>If Type(resolution) is not Object, then</span></p><ol><li><p><span>Return FulfillPromise(promise, resolution).</span></p></li></ol></li><li><p><span>Let then be Get(resolution, \"then\").</span></p></li><li><p><span>If then is an abrupt completion, then</span></p><ol><li><p><span>Return RejectPromise(promise, then.[[Value]]).</span></p></li></ol></li><li><p><span>Let thenAction be then.[[Value]].</span></p></li><li><p><span>If IsCallable(thenAction) is false, then</span></p><ol><li><p><span>Return FulfillPromise(promise, resolution).</span></p></li></ol></li><li><p><span>Perform EnqueueJob(\"PromiseJobs\", PromiseResolveThenableJob, « promise, resolution, thenAction »).</span></p></li><li><p><span>Return undefined.</span></p></li></ol></blockquote><p><span><code>Resolve</code>比<code>Reject</code>稍微长了点，不过其中也都是些格式检查以及错误处理，在这里检查出了错误，还是要跳转到<code>RejectPromise</code>。</span><span>值得注意的是第8步到第12步，<code>resolution</code>是<code>Resolve</code>函数调用时候的参数，这里取出了它的<code>then</code>属性值，并且如果这个属性值不是函数，那么就调用<code>FulfillPromise</code>，否则的话，调用<code>EnqueueJob</code>。</span><span>很明显，只有<code>Promise</code>的实例才含有<code>then</code>的方法，那么这里的意思就是说，如果<code>resolution</code>不是<code>Promise</code>的实例，那么调用<code>FulfillPromise</code>，否则调用<code>EnqueueJob</code>。</span><span>对于第12步，这里的意思是把函数<code>PromiseResolveThenableJob</code>加入<code>PromiseJobs</code>任务队列中，并且这个函数的参数是后面<code>« promise, resolution, thenAction »</code>。这个函数内容不长，它在这里的作用其实就是把<code>resolve</code>和<code>reject</code>两个函数，调用<code>then</code>方法挂在了输入的这个<code>Promise</code>实例上。</span></p><p><span>另外，关于<code>EnqueueJob</code>，这个函数是JavaScript内部的有关任务队列的一个方法，它的作用就是把函数加入到以第一个参数为名的队列中，在这里当然就是把有关的回调函数加入到了<code>PromiseJobs</code>这个任务队列中。关于这个队列的事情，之后我再详细说明，在这里完全可以直接把它当作是<code>setTimeout</code>函数的变种，效果是类似的。</span></p><p><span>接下来再来看看<code>RejectPromise</code>：</span></p><blockquote><p><span>RejectPromise ( promise, reason )</span></p><ol><li><p><span>Assert: The value of promise.[[PromiseState]] is \"pending\".</span></p></li><li><p><span>Let reactions be promise.[[PromiseRejectReactions]].</span></p></li><li><p><span>Set promise.[[PromiseResult]] to reason.</span></p></li><li><p><span>Set promise.[[PromiseFulfillReactions]] to undefined.</span></p></li><li><p><span>Set promise.[[PromiseRejectReactions]] to undefined.</span></p></li><li><p><span>Set promise.[[PromiseState]] to \"rejected\".</span></p></li><li><p><span>If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, \"reject\").</span></p></li><li><p><span>Return TriggerPromiseReactions(reactions, reason).</span></p></li></ol></blockquote><p><span>这里的描述也很简单，总之就是取出<code>Reject</code>任务队列，当前<code>Promise</code>的属性挨个清空，状态改变为<code>rejected</code>。</span><span>最后的<code>TriggerPromiseReactions</code>函数就是从任务队列中依次取出任务，然后异步运行。实际上在这个队列中的并不是回调函数，而是回调函数的运行环境；它里面不仅仅包含了回调，还包含了这个回调函数运行所需要的各种参数。所以这里运行任务还是用了个单独的函数来，这个函数叫<code>PromiseReactionJob</code>，它的内容我会在<code>then</code>章节说明，在这里大家记着这个名字就行了。</span></p><p><span><code>FulfillPromise</code>函数的逻辑与之类似：</span></p><blockquote><p><span>FulfillPromise ( promise, value)</span></p><ol><li><p><span>Assert: The value of promise.[[PromiseState]] is \"pending\".</span></p></li><li><p><span>Let reactions be promise.[[PromiseFulfillReactions]].</span></p></li><li><p><span>Set promise.[[PromiseResult]] to value.</span></p></li><li><p><span>Set promise.[[PromiseFulfillReactions]] to undefined.</span></p></li><li><p><span>Set promise.[[PromiseRejectReactions]] to undefined.</span></p></li><li><p><span>Set promise.[[PromiseState]] to \"fulfilled\".</span></p></li><li><p><span>Return TriggerPromiseReactions(reactions, value).</span></p></li></ol></blockquote><p><span>同样的取出队列，清空属性，状态改变为<code>fulfilled</code>，然后回调加入任务队列异步运行。</span></p><p><span>在上面的规范中，我们能很明显的发现，这两个函数都会操作它们对应的<code>promise</code>实例，规范中这个实例是这两个函数的属性，在函数内部直接就取了出来。我在这里并没有使用这个办法，而是使用闭包将这个实例保存在了作用域中。嘛……这纯粹是个人习惯问题，两个办法效果是一样的，总之这里是需要将<code>promise</code>实例以及其对应的<code>resolve</code>和<code>reject</code>函数相互绑定。这也就是上面提过的，所谓<code>特殊之处</code>。</span></p><p><span>根据上面的描述，写出它们以及生成它们的<code>createResolvingFunctions</code>应该是不难的：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// 创建Resolve和reject函数</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createResolvingFunctions</span>(<span class=\"hljs-params\">promise</span>) </span>{</li><li>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">resolution</span>) </span>{</li><li>        <span class=\"hljs-keyword\">if</span> (resolution <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Promise</span>) {</li><li>            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>                resolution.then(resolve, reject);</li><li>            }, <span class=\"hljs-number\">0</span>);</li><li>            <span class=\"hljs-keyword\">return</span>;</li><li>        }</li><li>        <span class=\"hljs-keyword\">if</span> (promise.PromiseState === <span class=\"hljs-string\">'pending'</span>) {</li><li>            <span class=\"hljs-keyword\">const</span> reactions = promise.PromiseFulfillReactions;</li><li></li><li>            promise.PromiseFulfillReactions = <span class=\"hljs-literal\">undefined</span>;</li><li>            promise.PromiseRejectReactions = <span class=\"hljs-literal\">undefined</span>;</li><li>            promise.PromiseState = <span class=\"hljs-string\">'fulfilled'</span>;</li><li>            promise.PromiseResult = resolution;</li><li></li><li>            <span class=\"hljs-keyword\">return</span> setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; reactions.length; i++) {</li><li>                    promiseReactionJob(reactions[i], resolution);</li><li>                }</li><li>            }, <span class=\"hljs-number\">0</span>);</li><li>        }</li><li>    }</li><li>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">reason</span>) </span>{</li><li>        <span class=\"hljs-keyword\">if</span> (promise.PromiseState === <span class=\"hljs-string\">'pending'</span>) {</li><li>            <span class=\"hljs-keyword\">const</span> reactions = promise.PromiseRejectReactions;</li><li></li><li>            promise.PromiseFulfillReactions = <span class=\"hljs-literal\">undefined</span>;</li><li>            promise.PromiseRejectReactions = <span class=\"hljs-literal\">undefined</span>;</li><li>            promise.PromiseState = <span class=\"hljs-string\">'rejected'</span>;</li><li>            promise.PromiseResult = reason;</li><li></li><li>            <span class=\"hljs-keyword\">return</span> setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; reactions.length; i++) {</li><li>                    promiseReactionJob(reactions[i], reason);</li><li>                }</li><li>            }, <span class=\"hljs-number\">0</span>);</li><li>        }</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">return</span>({</li><li>        <span class=\"hljs-attr\">resolve</span>: resolve,</li><li>        <span class=\"hljs-attr\">reject</span>: reject</li><li>    });</li><li>}</li></ul></code></pre><h1 id=\"BthenE696B9E6B395\"><code>then</code>方法</h1><p><span>主体部分完成之后，我们再来看看<code>then</code>：</span></p><blockquote><p><span>Promise.prototype.then ( <em>onFulfilled</em>, <em>onRejected</em> )</span><span>When the <strong>then</strong> method is called with arguments <em>onFulfilled</em> and <em>onRejected</em>, the following steps are taken:</span></p><ol><li><p><span>Let promise be the this value.</span></p></li><li><p><span>If IsPromise(promise) is false, throw a TypeError exception.</span></p></li><li><p><span>Let C be ? SpeciesConstructor(promise, %Promise%).</span></p></li><li><p><span>Let resultCapability be ? NewPromiseCapability(C).</span></p></li><li><p><span>Return PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability).</span></p></li></ol></blockquote><p><span>第1步不用说，肯定是<code>promise = this</code>；</span><span>第2步<code>IsPromise</code>顾名思义就是判断它是不是<code>Promise</code>类；</span><span>第3步中使用了<code>SpeciesConstructor</code>方法，它的具体内容就不提了，它在这里的作用就是得到<code>Promise</code>的构造函数。</span><span>第4步中使用了<code>NewPromiseCapability</code>函数，这个函数内部将会先生成一个<code>promise</code>实例，然后根据这个实例再使用上面提过的<code>createResolvingFunctions</code>函数生成对应的<code>resolve</code>、<code>reject</code>函数，最后将它们三者封装到一个对象中返回。</span><span>第5步调用了<code>PerformPromiseThen</code>函数，它才是整个<code>then</code>方法的核心，来看看它的规范：</span></p><blockquote><p><span>PerformPromiseThen ( <em>promise</em>, <em>onFulfilled</em>, <em>onRejected</em>, <em>resultCapability</em> )</span></p><p><span>The abstract operation PerformPromiseThen performs the “then” operation on <em>promise</em> using <em>onFulfilled</em> and <em>onRejected</em> as its settlement actions. The result is resultCapability's promise.</span></p><ol><li><p><span>Assert: IsPromise(promise) is true.</span></p></li><li><p><span>Assert: resultCapability is a PromiseCapability Record.</span></p></li><li><p><span>If IsCallable(onFulfilled) is false, then</span></p><ol><li><p><span>Let onFulfilled be undefined.</span></p></li></ol></li><li><p><span>If IsCallable(onRejected) is false, then</span></p><ol><li><p><span>Let onRejected be undefined.</span></p></li></ol></li><li><p><span>Let fulfillReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: \"Fulfill\", [[Handler]]: onFulfilled }.</span></p></li><li><p><span>Let rejectReaction be the PromiseReaction { [[Capability]]: resultCapability, [[Type]]: \"Reject\", [[Handler]]: onRejected }.</span></p></li><li><p><span>If promise.[[PromiseState]] is \"pending\", then</span></p><ol><li><p><span>Append fulfillReaction as the last element of the List that is promise.[[PromiseFulfillReactions]].</span></p></li><li><p><span>Append rejectReaction as the last element of the List that is promise.[[PromiseRejectReactions]].</span></p></li></ol></li><li><p><span>Else if promise.[[PromiseState]] is \"fulfilled\", then</span></p><ol><li><p><span>Let value be promise.[[PromiseResult]].</span></p></li><li><p><span>Perform EnqueueJob(\"PromiseJobs\", PromiseReactionJob, « fulfillReaction, value »).</span></p></li></ol></li><li><p><span>Else,</span></p><ol><li><p><span>Assert: The value of promise.[[PromiseState]] is \"rejected\".</span></p></li><li><p><span>Let reason be promise.[[PromiseResult]].</span></p></li><li><p><span>If promise.[[PromiseIsHandled]] is false, perform HostPromiseRejectionTracker(promise, \"handle\").</span></p></li><li><p><span>Perform EnqueueJob(\"PromiseJobs\", PromiseReactionJob, « rejectReaction, reason »).</span></p></li></ol></li><li><p><span>Set promise.[[PromiseIsHandled]] to true.</span></p></li><li><p><span>Return resultCapability.[[Promise]].</span></p></li></ol></blockquote><p><span>看起来很长，其实很好理解，先是对输入的两个回调<code>onFulfilled</code>和<code>onRejected</code>做格式检查，如果不是函数，那么直接忽略；然后按照当前实例的状态分别进行处理。</span><span>如果当前实例的状态是<code>fulfilled</code>，那么在队列中异步调用<code>PromiseReactionJob</code>。</span><span>对于<code>rejected</code>状态也是相似的，它也将会在异步队列中调用<code>PromiseReactionJob</code>。</span><span>如果当前实例的状态是<code>pending</code>，说明前面的任务还没有执行完毕，现在我们还不知道到底要调用哪个回调，所以我们需要将现场保存起来。这里我们将当前涉及到的回调、那个新的<code>promise</code>实例，以及它对应的<code>resolve</code>、<code>reject</code>函数全部保存到了当前<code>promise</code>实例的任务堆栈之中。 </span><span>在最后将会返回在<code>then</code>方法第四步中创建的<code>新</code>的<code>Promise</code>实例。</span></p><p><span><code>PromiseReactionJob</code>函数就是专门用来运行任务的函数：</span></p><blockquote><p><span><strong>PromiseReactionJob</strong> ( <em>reaction</em>, <em>argument</em> )</span></p><p><span>The job PromiseReactionJob with parameters <em>reaction</em> and <em>argument</em> applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler.</span></p><ol><li><p><span>Assert: reaction is a PromiseReaction Record.</span></p></li><li><p><span>Let promiseCapability be reaction.[[Capability]].</span></p></li><li><p><span>Let type be reaction.[[Type]].</span></p></li><li><p><span>Let handler be reaction.[[Handler]].</span></p></li><li><p><span>If handler is undefined, then</span></p><ol><li><p><span>If type is \"Fulfill\", let handlerResult be NormalCompletion(argument).</span></p></li><li><p><span>Otherwise, type is \"Reject\". Let handlerResult be Completion {[[Type]]: throw, [[Value]]: argument, [[Target]]: empty}.</span></p></li></ol></li><li><p><span>Else, let handlerResult be Call(handler, undefined, « argument »).</span></p></li><li><p><span>If handlerResult is an abrupt completion, then</span></p><ol><li><p><span>Let status be Call(promiseCapability.[[Reject]], undefined, « handlerResult.[[Value]] »).</span></p></li></ol></li><li><p><span>Else,</span></p><ol><li><p><span>Let status be Call(promiseCapability.[[Resolve]], undefined, « handlerResult.[[Value]] »).</span></p></li></ol></li><li><p><span>Return Completion(status).</span></p></li></ol></blockquote><p><span>整个过程不是很复杂，简而言之就是按照回调的类型分别运行，如果回调顺利执行，那么就执行新的<code>Promise</code>的<code>Resolve</code>函数，否则执行<code>Reject</code>函数。最后返回<code>Resolve</code>或者<code>Reject</code>的状态。</span></p><p><span>至此<code>then</code>的过程就这样了，但是整个过程中有个很特别的地方。</span><span>定义<code>Promise</code>的实例需要输入一个函数，然而在使用<code>NewPromiseCapability</code>创建新的实例的时候，我们并没有为它输入任何函数。实际上这里创建的新的实例其实仅仅是个继承了<code>Promise</code>原型的空壳子对象，输入的是个空函数，它的作用是为了保证<code>then</code>方法能够链式调用。</span><span>综上所述，<code>then</code>部分的代码就可以是这样的：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li>52</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// 运行任务队列</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">promiseReactionJob</span>(<span class=\"hljs-params\">reaction, argument</span>) </span>{</li><li>    <span class=\"hljs-keyword\">const</span> handler = reaction.handler,</li><li>        resolve = reaction.resolve,</li><li>        reject = reaction.reject;</li><li></li><li>    <span class=\"hljs-keyword\">let</span> handlerResult;</li><li>    <span class=\"hljs-keyword\">try</span> {</li><li>        handlerResult = handler(argument);</li><li>        resolve(handlerResult);</li><li>    } <span class=\"hljs-keyword\">catch</span> (e) {</li><li>        reject(e);</li><li>    }</li><li>}</li><li></li><li><span class=\"hljs-comment\">// then方法</span></li><li><span class=\"hljs-built_in\">Promise</span>.prototype.then = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">onResolved, onRejected</span>) </span>{</li><li>    <span class=\"hljs-comment\">// 如果then的参数不是函数，那么就忽略它</span></li><li>    onResolved = isFunction(onResolved) ? onResolved : <span class=\"hljs-function\">(<span class=\"hljs-params\">(v</span>) =&gt;</span> v);</li><li>    onRejected = isFunction(onRejected) ? onRejected : <span class=\"hljs-function\">(<span class=\"hljs-params\">(v</span>) =&gt;</span> v);</li><li></li><li>    <span class=\"hljs-comment\">// 封装当前运行环境</span></li><li>    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-keyword\">this</span>,</li><li>        newPromise = newPromiseCapability(),</li><li>        fulfillReaction = {</li><li>            <span class=\"hljs-attr\">promise</span>: newPromise.promise,</li><li>            <span class=\"hljs-attr\">resolve</span>: newPromise.resolve,</li><li>            <span class=\"hljs-attr\">reject</span>: newPromise.reject,</li><li>            <span class=\"hljs-attr\">handler</span>: onResolved</li><li>        },</li><li>        rejectReaction = {</li><li>            <span class=\"hljs-attr\">promise</span>: newPromise.promise,</li><li>            <span class=\"hljs-attr\">resolve</span>: newPromise.resolve,</li><li>            <span class=\"hljs-attr\">reject</span>: newPromise.reject,</li><li>            <span class=\"hljs-attr\">handler</span>: onRejected</li><li>        };</li><li></li><li>    <span class=\"hljs-keyword\">if</span>(self.PromiseState === <span class=\"hljs-string\">'pending'</span>) {</li><li>        self.PromiseFulfillReactions.push(fulfillReaction);</li><li>        self.PromiseRejectReactions.push(rejectReaction);</li><li>    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (self.PromiseState === <span class=\"hljs-string\">'fulfilled'</span>) {</li><li>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>            promiseReactionJob(fulfillReaction, self.PromiseResult);</li><li>        }, <span class=\"hljs-number\">0</span>);</li><li>    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (self.PromiseState === <span class=\"hljs-string\">'resolved'</span>) {</li><li>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>            promiseReactionJob(rejectReaction, self.PromiseResult);</li><li>        }, <span class=\"hljs-number\">0</span>);</li><li>    }</li><li></li><li>    <span class=\"hljs-keyword\">return</span>(newPromise.promise);</li><li>};</li></ul></code></pre><p><span>到此为止，我们就实现了个最为简单的<code>Promise</code>，总共代码并不长，不到150行的样子。但是规范却写的很绕，有些地方语焉不详的只能靠自己猜……我尝试了很久才写成现在这个样子。完整版代码自己把上面的代码拼拼就是啦，我在这里就不贴了。</span></p><h1 id=\"BE8BF90E8A18CE58E9FE79086\">运行原理</h1><p><span>代码的运行细节在上面大片大片的规范中都已经非常详细了，如果你还有些疑问，那你可以返回去再看看。下面我将以下面这段代码为例，实际讲讲我对<code>Promise</code>原理的理解，这段代码的效果很简单，就是每隔1秒顺序打印出里面的字符串。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delay</span>(<span class=\"hljs-params\">time, value</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">executor</span>(<span class=\"hljs-params\">resolve</span>) </span>{</li><li>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyn</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>            <span class=\"hljs-built_in\">console</span>.log(value);</li><li>            resolve();</li><li>        }, time);</li><li>    }));</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">value</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>        <span class=\"hljs-keyword\">return</span> delay(<span class=\"hljs-number\">1000</span>, value)</li><li>    };</li><li>}</li><li></li><li>log(<span class=\"hljs-string\">\"start:\"</span>)()</li><li>    .then(log(<span class=\"hljs-string\">'Step 1;'</span>))</li><li>    .then(log(<span class=\"hljs-string\">'Step 2;'</span>))</li><li>    .then(log(<span class=\"hljs-string\">'End.'</span>));</li></ul></code></pre><p><span>在上面的代码中，被<code>promise</code>包裹起来的操作全都是异步运行的，这也就意味着整个操作链的建立和内部异步操作的运行是完全分离开的，所以在这里我也分成同步和异步两个部分来讲解。</span><span>为了方便讲解，上面的函数全部都是具名函数。另外我还给每个<code>Promise</code>实例进行了编号，实际做法就是在全局设置了一个名为<code>index</code>的变量，这个变量将会成为每个<code>Promise</code>实例的一个属性，并且每当创建一个新的实例，<code>index</code>都会<code>+1</code>。在<code>promise</code>运行的过程中，异步过程再加上回调函数到处跑，不标记清楚的话，你根本不知道当前运行的函数是属于哪个实例。</span></p><h2 id=\"BE5908CE6ADA5E8BF87E7A88B\">同步过程</h2><p><span>所谓同步过程，在这里就是指主进程建立<code>promise</code>调用链的过程。从第三章我们知道每个<code>then</code>都会返回一个新的promise，而这些新的promise和原本在then之中包裹的回调在组后会变成什么样子呢？</span><span>那么，让我们从头开始。</span></p><p><span>首先是<code>log(\"start:\")()</code>，这句很好理解，先是<code>log(\"start:\")</code>返回了内部的<code>handler</code>函数，然后紧跟着一个括号运算符<code>()</code>，立马运行了<code>handler</code>，然后就是运行<code>delay(..)</code>返回其中的值。</span><span><code>delay(..)</code>之中返回了个<code>promise</code>实例，这个实例的编号是<code>1</code>，为了方便，我们就叫它<code>promise01</code>吧。创建实例将会立即运行输入的函数<code>executor</code>，在这里这个函数内部只注册了个异步操作，其余啥都没有，随后就直接返回了。</span><span>所以现在的情况可以看作是这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li>promise01</li><li>    .then(log(<span class=\"hljs-string\">'Step 1;'</span>))</li><li>    .then(log(<span class=\"hljs-string\">'Step 2;'</span>))</li><li>    .then(log(<span class=\"hljs-string\">'End.'</span>));</li></ul></code></pre><p><span>接下来就到了第一个<code>then</code>。</span><span>在这里依旧是<code>log(..)</code>首先运行，当然它也返回了<code>handler</code>函数，为了以示区别，这个<code>handler</code>函数我们就叫它<code>handler01</code>好了。</span><span>然后<code>then</code>运行，在这之中首先调用了<code>newPromiseCapability</code>方法，创建了一个新的<code>promise</code>实例，它的编号是<code>2</code>，然后由于<code>promise01</code>的状态并未改变，依旧是等待的<code>pending</code>，所以这里的运行环境（新实例<code>promise02</code>和函数<code>handler01</code>）将会被打包并保存到<code>promise01</code>的任务队列之中。</span><span>最后，<code>then</code>方法返回了<code>promise02</code>。</span></p><p><span>接下来就都是一样的操作了，每个<code>then</code>都会返回一个新的<code>promise</code>，而后面的回调总是会连着新的<code>promise</code>实例被打包到前一个实例的任务队列之中。就这样，一个由<code>promise</code>构成的操作链表就形成了。用图片的形式我觉得会更清晰明了一点：</span><span><img class=\"img-block\" src=\"/img/simple-promise/promise-then-chain.png\" alt=\"Promise调用链\" title=\"Promise调用链\"><span class=\"img-title\">图1　Promise调用链</span></span><span>上面的代码中没有涉及错误捕获的过程，所以在图中我只画出了<code>resolve</code>函数，<code>reactions</code>队列特指<code>PromiseFulfillReactions</code>队列。</span></p><p><span>另外，由于<code>PromiseFulfillReactions</code>和<code>PromiseRejectReactions</code>都是数组，所以理论上每个<code>promise</code>都可以链接任意个调用链的。比如像这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> start = log(<span class=\"hljs-string\">\"start:\"</span>)();</li><li></li><li>start</li><li>    .then(log1(<span class=\"hljs-string\">'Step 1.1;'</span>))</li><li>    .then(log1(<span class=\"hljs-string\">'Step 2.2;'</span>))</li><li>    .then(log1(<span class=\"hljs-string\">'End1.'</span>));</li><li></li><li>start</li><li>    .then(log2(<span class=\"hljs-string\">'Step 2.1;'</span>))</li><li>    .then(log2(<span class=\"hljs-string\">'Step 2.2;'</span>))</li><li>    .then(log2(<span class=\"hljs-string\">'End2.'</span>));</li></ul></code></pre><p><span>上面两个操作链都是链接在<code>start</code>之后的，并且由于是异步操作，所以它们之间并不会相互冲突。</span></p><h2 id=\"BE5BC82E6ADA5E8BF87E7A88B\">异步过程</h2><p><span>主进程运行完毕之后，就会等待第一个异步函数<code>asyn</code>的运行。对于现在这个例子，那就是要等待1秒，然后<code>asyn</code>函数就会运行。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyn</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log(value);</li><li>    resolve();</li><li>}</li></ul></code></pre><p><span>在这个函数中先打印出了<code>\"start:\"</code>这个字符串，然后运行<code>resolve()</code>。</span><span>在这里<code>resolve()</code>的输入参数是空的，也就是<code>undefined</code>，所以会直接改变当前<code>promise</code>的状态，并取出任务队列中的任务，在<code>promiseReactionJob()</code>函数中异步运行。</span><span>当前任务运行完毕之后主进程也随之完毕，再次进入异步进程，也就是<code>promiseReactionJob</code>中运行刚才取出的所有任务。</span><span>在这个函数中，会首先运行环境中保存的回调，在这里这个回调就是<code>handler01</code>，在这个回调之中会运行<code>delay()</code>函数，它将新建<code>promise</code>，这个新实例的编号是<code>6</code>，并且会同时注册新的异步函数<code>asyn</code>。在回调结束之后，将会运行<code>resolve()</code>函数，而此时它会有一个参数，那就是刚刚返回的<code>promise06</code>。</span><span>好了，现在问题来了，现在马上就要运行的这个<code>resolve()</code>，是和哪个实例绑定的？</span></p><p><span>答案是<code>promise02</code>。</span></p><p><span><code>promise06</code>当然是<code>Promise</code>的实例，所以将会运行<code>resolve</code>中的这段：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li>setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>    promise06.then(promise02.resolve, promise02.reject);</li><li>}, <span class=\"hljs-number\">0</span>);</li></ul></code></pre><p><span><code>promise02</code>中还存着后面的<code>handler</code>回调呢，当然不能就这么销毁了，那么就把它链接到这个新的<code>promise06</code>之中，这就是这里这个<code>then</code>的意义。当然，这个<code>then</code>也会生成一个新的<code>promise</code>，这个新实例的编号是<code>7</code>，但是它的后面什么都没有，只是个空的。并且需要注意的是，在<code>then</code>中的回调是<code>promise02</code>的<code>resolve</code>和<code>reject</code>函数，这样就意味着运行<code>promise07</code>的回调就会直接改变<code>promise02</code>的状态。所以，整个调用链变成了如下的模样：</span><span><img class=\"img-block\" src=\"/img/simple-promise/promise-then-chain-asyn-01.png\" alt=\"异步过程中的调用链 一\" title=\"异步过程中的调用链 一\"><span class=\"img-title\">图2　异步过程中的调用链 一</span></span></p><p><span>好了，现在只需要等着下一步异步操作运行。</span><span>又等待了1秒，<code>promise06</code>的异步操作运行了。它打印出了<code>\"Step 1;\"</code>，然后运行它的<code>resolve()</code>。当然又是取出任务队列异步运行任务，和前面的过程一样，这里马上就会开始运行<code>promise07</code>的回调。而在上面也说了，经过了前面的<code>then</code>操作，现在<code>promise07</code>的回调实际上就是<code>promise02</code>的<code>resolve</code>。</span><span>当<code>promise02</code>的<code>resolve</code>运行，就会取出<code>promise03</code>的回调并运行。同样的，这里会创建<code>promise08</code>和<code>promise09</code>，它们的过程和上面一样，就不再多说了。</span><span>当<code>promise07</code>的回调运行完毕，也就是意味着新的调用链已经创建完毕，根据流程还会调用<code>promise07</code>的<code>resolve</code>函数，<code>promise07</code>的队列中是空的，所以这里只会改变它自己的状态，然后就什么都没有了。</span><span>经过这些操作之后，新的调用链就变成了这样：</span><span><img class=\"img-block\" src=\"/img/simple-promise/promise-then-chain-asyn-02.png\" alt=\"异步过程中的调用链 二\" title=\"异步过程中的调用链 二\"><span class=\"img-title\">图3　异步过程中的调用链 二</span></span><span>之后的操作就都是重复上面的过程了，在这里就不再多说了。</span></p><h2 id=\"BE5B08FE6B58BE9AA8C\">小测验</h2><p><span>经过了上述的讲解，相信你对<code>promise</code>的运行过程已经有了一定程度的理解。那么我在这里出几个问题，顺着上面的思路和代码想想它们是如何运行的吧。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'doSomething(): start'</span>);</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) </span>{</li><li>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'doSomething(): end'</span>);</li><li>            resolve();</li><li>        }, <span class=\"hljs-number\">1000</span>);</li><li>    });</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomethingElse</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'doSomethingElse(): start'</span>);</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) </span>{</li><li>        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'doSomethingElse(): end'</span>);</li><li>            resolve();</li><li>        }, <span class=\"hljs-number\">1000</span>);</li><li>    });</li><li>}</li><li></li><li><span class=\"hljs-comment\">//# 1</span></li><li>doSomething().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> doSomethingElse();</li><li>});</li><li></li><li><span class=\"hljs-comment\">//# 2</span></li><li>doSomething().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>    doSomethingElse();</li><li>});</li><li></li><li><span class=\"hljs-comment\">//# 3</span></li><li>doSomething().then(doSomethingElse());</li><li></li><li><span class=\"hljs-comment\">//# 4</span></li><li>doSomething().then(doSomethingElse);</li></ul></code></pre><h1 id=\"BEnqueueJob\"><code>EnqueueJob</code></h1><p><span>如果你还记得的话，其实在上面的讲解中，还有个东西我没说过——<code>Promise</code>异步操作专用的任务队列函数<code>EnqueueJob</code>。虽然在上面我说它和<code>setTimeout</code>的效果是类似的，在这里我们确实也是用<code>setTimeout</code>来代替它的，但其实深究起来这俩的区别还是挺大的。</span></p><p><span>先来看看下面的代码：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> start = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();</li><li><span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;</li><li>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</li><li>        index ++;</li><li>        <span class=\"hljs-keyword\">if</span>((+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>) - start &lt; <span class=\"hljs-number\">1000</span>) {</li><li>            foo()</li><li>        } <span class=\"hljs-keyword\">else</span> {</li><li>            <span class=\"hljs-built_in\">console</span>.log(index);</li><li>        }</li><li>    }, <span class=\"hljs-number\">0</span>)</li><li>}());</li></ul></code></pre><p><span>上面这段测试用的代码就是在1秒的时间内不断运行<code>setTimeout</code>，最后打印出运行次数。不同的电脑、浏览器可能结果有些不同，在我的电脑中的结果是<code>244</code>左右。这也就意味着，在这1秒中一共运行了244次<code>setTimeout</code>函数，平均每次大概花费了<code>4ms</code>左右的时间。</span><span>单单<code>4ms</code>的时间间隔不是什么大问题，但是如果你的调用链足够长，再加上你的异步操作本身需要的时间，这个时间累积起来是很有可能造成影响的。对于网页应用而言，顶多页面卡顿片刻，但是如果是在服务器端的node，这点时间可能就会造成严重的后果。</span></p><p><span>至于造成这个现象的原因，其实不是什么深刻难懂的技术问题，而是因为——<strong>这是规范规定的</strong>。</span></p><blockquote><p><span>Timers can be nested; after five such nested timers, however, the interval is forced to be at least <strong>four milliseconds</strong>.</span></p></blockquote><p><span><code>setTimeout</code>是属于<code>window</code>的内容，不属于js语言规范，所以在ECMA中是查不到的，上面的引用是它在HTML5规范中的规定。可以看到，规范中直接指明了定时器的最短时间间隔就是<code>4ms</code>。</span></p><p><span>而对于原生的<code>Promise</code>来说就没有这个问题了，原生的<code>Promise</code>使用的是<code>EnqueueJob</code>这个专门的函数来操作异步队列，它是没有这个延迟的。如果你对这还是有点疑虑的话，我们可以尝试测量一下原生<code>Promise</code>的队列间隔。</span><span><code>EnqueueJob</code>函数是js规范内部的抽象函数，我们在外部是无法操作它的，但是我们可以构造出一个极为简单但是却非常长的调用链来，这样就能间接的对它进行测量。比如像下面的代码这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">\"Testing with promise\"</span>);</li><li><span class=\"hljs-keyword\">let</span> next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) </span>{</li><li>        res();</li><li>    });</li><li><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {</li><li>    next = next.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{</li><li>            res();</li><li>        });</li><li>    });</li><li>}</li><li>next.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">\"Testing with promise\"</span>);</li><li>});</li></ul></code></pre><p><span>在上面的代码中，我们建立了个长达1000个<code>then</code>的调用链，每个<code>then</code>内部都没有异步操作，最开始的<code>next</code>已经处于<code>fulfilled</code>状态，之后的第一个<code>then</code>会直接调用<code>promiseReactionJob</code>运行回调，但这个回调是异步运行的，这个新生成的<code>promise</code>会停留在<code>pending</code>状态中，随后的<code>then</code>就会和上面讲解过的流程一样构建调用链，等待异步操作。按照规范，每个<code>then</code>总共有三个异步操作：</span></p><ol><li><p><span><code>then</code>之中执行回调</span></p></li><li><p><span>生成新的<code>promise</code>实例链接到当前调用链</span></p></li><li><p><span>改变当前<code>promise</code>状态取出内部存着的回调并运行（虽然在这个例子中内部什么都没有）</span></p></li></ol><p><span>那么总共就有3000个异步操作，原生的和<code>setTimeout</code>的差距是非常显著的：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">//原生</span></li><li><span class=\"hljs-string\">\"Testing with promise: 45.292ms\"</span></li><li></li><li><span class=\"hljs-comment\">//我们自己实现</span></li><li><span class=\"hljs-string\">\"Testing with promise: 12446.450ms\"</span></li></ul></code></pre><p><span>使用<code>setTimeout</code>的<code>Promise</code>一共用了12秒左右，这和规范中<code>4ms</code>的限定是相符的；而原生的只花了<code>45ms</code>，这也就意味着<code>EnqueueJob</code>的延迟只有<code>15μs</code>。对于浏览器来说，这几乎就等于没有延迟了。</span></p><p><span>所以<code>setTimeout</code>是无法达到完全无延迟的异步操作。如果你在使用诸如我这里这样用<code>setTimeout</code>实现的<code>Promise</code>，那你就需要特别小心这一点。</span></p><h1 id=\"BE680BBE7BB93\">总结</h1><p><span><code>Promise</code>解决的不仅仅是缩进的问题，更为重要的是它提供了更加安全的反转控制机制，我们终于能和和线性编程一样，随意控制异步编程的流程了，我在使用过几次之后也能体会到它带来的爽快感。</span></p><p><span>但是相对的，我也不得不承认Promise并不是完美的。虽然它的确比回调模式要好，但是这就好像是二十步比百步的感觉，它的确是略有优势，但是如果我有选择，我会选择<code>python</code>的<code>async/await</code>（笑。</span><span>即便我花了很长时间自己实现了它，并写下了这篇文章，我现在依然觉得它难以理解并且容易误用。虽然它已经尽力去贴近线性编程的代码模式，但是我在使用中也不得不一再对自己强调这是<code>异步</code>的，这和同步不一样……这让我觉得比较痛苦。</span></p><p><span>即便我有这么多牢骚，在等待ES7的日子里，<code>promise</code>依旧是我们必须掌握的工具之一。</span><span>但是我觉得我们也可以换个角度来看待这件事情，理解某个困难的知识点，学习到某个新奇的知识，甚至只是<code>promise</code>这样奇怪的控制思路，这些东西本身不也能让人感到高兴吗。</span></p>"}