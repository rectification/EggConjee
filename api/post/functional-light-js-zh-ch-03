{"name":"functional-light-js-zh-ch-03","path":"/post/functional-light-js-zh-ch-03","title":"管理函数入口","category":"JS轻量级函数式编程","date":["2017","05","01"],"tag":["JavaScript","函数式编程","翻译"],"layout":"post","toc":[{"tocTitle":"一些在现在，一些在未来","bolt":"BE4B880E4BA9BE59CA8E78EB0E59CA8EFBC8CE4B880E4BA9BE59CA8E69CAAE69DA5","child":[{"tocTitle":"bind(..)","bolt":"Bbind----","parent":"BE4B880E4BA9BE59CA8E78EB0E59CA8EFBC8CE4B880E4BA9BE59CA8E69CAAE69DA5"},{"tocTitle":"反转实参","bolt":"BE58F8DE8BDACE5AE9EE58F82","parent":"BE4B880E4BA9BE59CA8E78EB0E59CA8EFBC8CE4B880E4BA9BE59CA8E69CAAE69DA5"}]},{"tocTitle":"一次一个","bolt":"BE4B880E6ACA1E4B880E4B8AA","child":[{"tocTitle":"为什么要使用柯里化和局部应用？","bolt":"BE4B8BAE4BB80E4B988E8A681E4BDBFE794A8E69FAFE9878CE58C96E5928CE5B180E983A8E5BA94E794A8EFBC9F","parent":"BE4B880E6ACA1E4B880E4B8AA"},{"tocTitle":"多于1个实参的柯里化","bolt":"BE5A49AE4BA8E1E4B8AAE5AE9EE58F82E79A84E69FAFE9878CE58C96","parent":"BE4B880E6ACA1E4B880E4B8AA"},{"tocTitle":"请不要再给我柯里化了……","bolt":"BE8AFB7E4B88DE8A681E5868DE7BB99E68891E69FAFE9878CE58C96E4BA86E280A6E280A6","parent":"BE4B880E6ACA1E4B880E4B8AA"}]},{"tocTitle":"归一化","bolt":"BE5BD92E4B880E58C96","child":[{"tocTitle":"一个又一个","bolt":"BE4B880E4B8AAE58F88E4B880E4B8AA","parent":"BE5BD92E4B880E58C96"},{"tocTitle":"不变之值","bolt":"BE4B88DE58F98E4B98BE580BC","parent":"BE5BD92E4B880E58C96"}]},{"tocTitle":"把它们都摊开来","bolt":"BE68A8AE5AE83E4BBACE983BDE6918AE5BC80E69DA5"},{"tocTitle":"由顺序造成的麻烦","bolt":"BE794B1E9A1BAE5BA8FE980A0E68890E79A84E9BABBE783A6","child":[{"tocTitle":"展开属性","bolt":"BE5B195E5BC80E5B19EE680A7","parent":"BE794B1E9A1BAE5BA8FE980A0E68890E79A84E9BABBE783A6"}]},{"tocTitle":"No Points","bolt":"BNo20Points"},{"tocTitle":"总结","bolt":"BE680BBE7BB93"}],"excerpt":["《JS轻量级函数式编程》系列的第三章。如果你觉得前两章的难度实在是不屑一顾，那么从这一章开始你就要小心了，从这一章我们将会正式进入函数式编程的学习。也不要太害怕啦，不要被这一章中各种乱七八糟的高阶函数吓到了……其实想明白了之后也并不复杂。"],"next":{"path":"/post/functional-light-js-zh-ch-04","title":"组合函数"},"prev":{"path":"/post/functional-light-js-zh-ch-02","title":"函数式函数的基础"},"content":"<p><span>在第二章的“函数输入”这一节中，我们讨论了函数形参和实参的基础。我们还看到了一些语法上的技巧，来缓解它们使用上的一些问题，比如<code>...</code>运算符和解构赋值。</span><span>在当时的讨论中，我建议尽可能的尝试设计只有一个形参的函数。但事实上要做到这一点很不容易，你并不总是控制着你需要使用的函数签名。</span><span>现在，我们将会把我们的目光转向更为复杂更为强大的模式，它们都能用于处理在这些场景中的函数输入。</span></p><h1 id=\"BE4B880E4BA9BE59CA8E78EB0E59CA8EFBC8CE4B880E4BA9BE59CA8E69CAAE69DA5\">一些在现在，一些在未来</h1><p><span>如果一个函数拥有多个实参，你可能马上就能指定一些参数，同时其余的参数将会被留下来稍后再指定。</span></p><p><span>思考这个函数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ajax</span>(<span class=\"hljs-params\">url,data,callback</span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li></ul></code></pre><p><span>让我们想象一下吧，你现在要设置几个API的调用，其中URL是预先就知道的，但是处理的响应数据和回调要等会儿才会知道。</span><span>当然，你也可以等到当所有的数据都已经知道的时候再调用<code>ajax(..)</code>，此时再去引用全局常量<em>URL</em>。但是还有另外一种方法，那就是创建一个已经带有<code>url</code>实参的函数引用。</span><span>我们要做的是创建一个仍然在底层调用<code>ajax(..)</code>的新函数，并且手动将<em>API URL</em>设置为第一个实参，然后等待接受另外两个实参。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPerson</span>(<span class=\"hljs-params\">data,cb</span>) </span>{</li><li>    ajax( <span class=\"hljs-string\">\"http://some.api/person\"</span>, data, cb );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getOrder</span>(<span class=\"hljs-params\">data,cb</span>) </span>{</li><li>    ajax( <span class=\"hljs-string\">\"http://some.api/order\"</span>, data, cb );</li><li>}</li></ul></code></pre><p><span>手动指定这些函数调用的封装当然是可以的，但它会变得非常冗长，特别是在有不同参数预设的变化时，比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCurrentUser</span>(<span class=\"hljs-params\">cb</span>) </span>{</li><li>    getPerson( { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID }, cb );</li><li>}</li></ul></code></pre><p><span>在实践中，函数式的编程者们总是习惯于寻找经常重复运用的操作模式，并尝试把这些行为转变为通用的可复用的实用程序。事实上，我相信这已经是许多读者的本能了。所以这并不是只有在函数式编程中才会出现的事情，但是这毫无疑问对于函数式来说非常重要。</span></p><p><span>为了构思上述这种用于预置实参的工具函数，我们不能仅看上面手动的实现，还需要从概念上来审视它，看看到底发生了什么。</span><span>我们一般会这么描述这种模式，<code>getOrder(data,cb)</code>函数是<code>ajax(url,data,cb)</code>函数的<em>局部应用(partial application)</em>。这个术语的概念就是来源于函数调用时实参被应用到了形参。正如你所看到的，我们只使用了前面的一些参数——特别给<code>url</code>形参提供了实参——而剩下的则会在稍后被应用。</span><span>对于这种模式稍微正式点的描述是这样的，局部应用能够严格的降低函数的计数值；计数值，是指函数预期形参的输入数量。我们的计数值从原始函数<code>ajax(..)</code>的<code>3</code>降低到了<code>getOrder(..)</code>函数的<code>2</code>。</span></p><p><span>我们再来定义一个工具函数<code>partial(..)</code>：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partial</span>(<span class=\"hljs-params\">fn,...presetArgs</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partiallyApplied</span>(<span class=\"hljs-params\">...laterArgs</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( ...presetArgs, ...laterArgs );</li><li>    };</li><li>}</li></ul></code></pre><p class=\"note\"><span>上面这个片段可不要看过就完了，稍微花点时间来消化这个程序到底发生了什么，以确保你真的了解了它。这里的这个代码模式实际上会在本书的其它部分一遍又一遍的出现，所以现在就马上掌握它吧！</span></p><p><span><code>partial(..)</code>函数接受到了一个局部应用的函数<code>fn</code>。然后传入的任何后续实参都会被聚合到<code>presetArgs</code>数组中，以备后续使用。</span><span>这个函数创建并返回了一个新的内部函数（为了清楚起见，我们称之为<code>partiallyApplied(..)</code>），其自身的实参被聚合到了名为<code>laterArgs</code>的数组中。</span><span>注意到这个内部函数对<code>fn</code>和<code>presetArgs</code>的引用了吗？这部分是如何工作的呢？在<code>partial(..)</code>运行之后，内部函数是如何能够保持对<code>fn</code>和<code>presetArgs</code>的访问的呢？如果你的答案是<em>闭包</em>，恭喜！你答对了！内部函数<code>partiallyApplied(..)</code>闭合了<code>fn</code>和<code>presetArgs</code>变量，所以无论它在哪里运行，它都可以随时访问这两个变量。看到了吗，理解闭包实在是太重要了。</span><span>当<code>partiallyApplied(..)</code>函数在你的程序的其他地方运行的时候，它将调用闭包中的<code>fn</code>来运行原始的函数，拿出一开始局部应用中输入的实参<code>presetArgs</code>（在闭包中），然后再使用之后输入的<code>laterArgs</code>实参。</span><span>如果你觉得有点晕，请停下来重新阅读这里。相信我，在接下来的文本中你会很高兴现在的你这么做了。</span><span>作为附注，函数式编程者们通常会喜欢这种代码较短的<code>=&gt;</code>箭头函数语法（请参考第一章 “语法”），例如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> partial =</li><li>    <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, ...presetArgs</span>) =&gt;</span></li><li>        (...laterArgs) =&gt;</li><li>            fn( ...presetArgs, ...laterArgs );</li></ul></code></pre><p><span>这么写是没有问题的，而且毫无疑问要更简洁更稀疏。但是我个人觉得无论这里的数学符号再怎么对称，它在整体可读性方面失去的更多，所有这些函数都是匿名的，并且由于这里模糊的函数边界，导致想要辨别这里的闭包变得更加困难。</span></p><p><span>无论使用哪种语法，你都能看出，我们使用<code>partial(..)</code>函数实现了提前局部应用的函数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> getPerson = partial( ajax, <span class=\"hljs-string\">\"http://some.api/person\"</span> );</li><li></li><li><span class=\"hljs-keyword\">var</span> getOrder = partial( ajax, <span class=\"hljs-string\">\"http://some.api/order\"</span> );</li></ul></code></pre><p><span>在这里暂停一下，然后好好想想<code>getPerson(..)</code>函数的形态/内部。它应看起来应该是这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> getPerson = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partiallyApplied</span>(<span class=\"hljs-params\">...laterArgs</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> ajax( <span class=\"hljs-string\">\"http://some.api/person\"</span>, ...laterArgs );</li><li>};</li></ul></code></pre><p><span><code>getOrder(..)</code>也是如此，那么<code>getCurrentUser(..)</code>又是怎样的呢？</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// version 1</span></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = partial(</li><li>    ajax,</li><li>    <span class=\"hljs-string\">\"http://some.api/person\"</span>,</li><li>    { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID }</li><li>);</li><li></li><li><span class=\"hljs-comment\">// version 2</span></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = partial( getPerson, { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } );</li></ul></code></pre><p><span>我们可以直接指定<code>url</code>和数据的实参来定义<code>getCurrentUser(..)</code>（版本一），也可以把<code>getCurrentUser(..)</code>定义为<code>getPerson(..)</code>的局部应用，同时仅指定附加的数据实参。</span><span>版本二是个更为简洁的表达，因为它重用了一些已经定义的东西，因此我认为它更为符合FP的精神。</span></p><p><span>为了确保我们理解了这两个版本的函数是如何工作的，下面分别是它们此时的完整代码：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// version 1</span></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partiallyApplied</span>(<span class=\"hljs-params\">...laterArgs</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> ajax(</li><li>        <span class=\"hljs-string\">\"http://some.api/person\"</span>,</li><li>        { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID },</li><li>        ...laterArgs</li><li>    );</li><li>};</li><li></li><li><span class=\"hljs-comment\">// version 2</span></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerPartiallyApplied</span>(<span class=\"hljs-params\">...outerLaterArgs</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> getPerson = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerPartiallyApplied</span>(<span class=\"hljs-params\">...innerLaterArgs</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> ajax( <span class=\"hljs-string\">\"http://some.api/person\"</span>, ...innerLaterArgs );</li><li>    };</li><li></li><li>    <span class=\"hljs-keyword\">return</span> getPerson( { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID }, ...outerLaterArgs );</li><li>}</li></ul></code></pre><p><span>同样的，在这里暂停，并重新阅读这里的代码片段，以确保你理解了这里发生了什么。</span></p><p class=\"note\"><span>第二个版本有一个额外的函数包装层，这看起来可能有点奇怪以及多余，但是这也是你在函数式编程中必须要习惯的事情。随着文章的进行，我们将会把许多函数不断堆叠在一起。记住，这是<em>函数式编程</em>！</span></p><p><span>我们来看看局部应用有用性的另一个例子。考虑这样一个<code>add(..)</code>函数，它接受两个实参，并把它们加了起来：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x,y</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> x + y;</li><li>}</li></ul></code></pre><p><span>现在想象一下，这里有一个数字列表，我们想要给这个列表中每个数字都加上一个数字。我们将使用JS数组中内置的<code>map(..)</code>方法。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">adder</span>(<span class=\"hljs-params\">val</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> add( <span class=\"hljs-number\">3</span>, val );</li><li>} );</li><li><span class=\"hljs-comment\">// [4,5,6,7,8]</span></li></ul></code></pre><p class=\"note\"><span>不要担心你之前从没见过<code>map(..)</code>函数，我们将会在本书的后面对它进行更为详细的介绍。现在你只需要知道它将枚举一个数组的所有元素，并通过调用一个函数来产生新的值，这些新的值将会组成一个新的数组。</span></p><p><span>我们无法直接传递<code>add(..)</code>给<code>map(..)</code>是因为<code>add(..)</code>的签名与<code>map(..)</code>函数的映射并不匹配。此时局部应用就能够帮助我们了：我们可以把<code>add(..)</code>函数的签名改写成可以匹配的东西。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li></ul><ul class=\"code\"><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( partial( add, <span class=\"hljs-number\">3</span> ) );</li><li><span class=\"hljs-comment\">// [4,5,6,7,8]</span></li></ul></code></pre><h2 id=\"Bbind----\"><code>bind(..)</code></h2><p><span>JavaScript有一个名为<code>bind(..)</code>的内建方法，它对所有的函数都有效。它有两个能力：预设<code>this</code>上下文并应用部分实参。</span></p><p><span>我认为将这两个功能合并在一个方法中是非常不幸的。有时候你会想要显式的绑定<code>this</code>上下文，而不是部分的应用实参。有时候你又会想要应用部分实参，但并不关心<code>this</code>绑定。我个人几乎从来没有碰到这两者同时进行的情景。</span><span>后一种情况更是尴尬，因为你必须传递一个可忽略的占位符，这个绑定的实参（第一个）通常是<code>null</code>。</span></p><p><span>像是这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> getPerson = ajax.bind( <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"http://some.api/person\"</span> );</li></ul></code></pre><p><span>这个<code>null</code>真的让我发狂。</span></p><h2 id=\"BE58F8DE8BDACE5AE9EE58F82\">反转实参</h2><p><span>回想一下，我们的<code>Ajax</code>函数的签名是<code>ajax( url, data, cb )</code>。如果我们想先局部应用<code>cb</code>但是又想等会再应用<code>data</code>和<code>url</code>？我们可以创建这样一个方法，这个方法将会把原函数包装起来，并且反转其参数顺序：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reverseArgs</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">argsReversed</span>(<span class=\"hljs-params\">...args</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( ...args.reverse() );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> reverseArgs =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span></li><li>        (...args) =&gt;</li><li>            fn( ...args.reverse() );</li></ul></code></pre><p><span>现在我们可以反转<code>ajax(..)</code>实参的顺序了，这样我们从右边的参数开始局部应用，而不是从左边开始。想要恢复预期的顺序，我们可以继续反转局部应用的函数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> cache = {};</li><li></li><li><span class=\"hljs-keyword\">var</span> cacheResult = reverseArgs(</li><li>    partial( reverseArgs( ajax ), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onResult</span>(<span class=\"hljs-params\">obj</span>)</span>{</li><li>        cache[obj.id] = obj;</li><li>    } )</li><li>);</li><li></li><li><span class=\"hljs-comment\">// later:</span></li><li>cacheResult( <span class=\"hljs-string\">\"http://some.api/person\"</span>, { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } );</li></ul></code></pre><p><span>现在，我们可以使用相同的反转局部应用的技巧，来定义一个<code>partialRight(..)</code>方法，它将从右边开始局部应用：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partialRight</span>(<span class=\"hljs-params\"> fn, ...presetArgs </span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> reverseArgs(</li><li>        partial( reverseArgs( fn ), ...presetArgs.reverse() )</li><li>    );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> cacheResult = partialRight( ajax, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onResult</span>(<span class=\"hljs-params\">obj</span>)</span>{</li><li>    cache[obj.id] = obj;</li><li>});</li><li></li><li><span class=\"hljs-comment\">// later:</span></li><li>cacheResult( <span class=\"hljs-string\">\"http://some.api/person\"</span>, { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } );</li></ul></code></pre><p><span><code>partialRight(..)</code>这种实现不能保证特定的形参接收到特定的局部应用的值，它只能确保局部应用的右半部分的值是传递给原始函数最右边的实参。</span></p><p><span>比如：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> rest = [].slice.call( <span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">3</span> );</li><li>    <span class=\"hljs-built_in\">console</span>.log( x, y, z, rest );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> f = partialRight( foo, <span class=\"hljs-string\">\"z:last\"</span> );</li><li></li><li>f( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> );            <span class=\"hljs-comment\">// 1 2 \"z:last\" []</span></li><li></li><li>f( <span class=\"hljs-number\">1</span> );                <span class=\"hljs-comment\">// 1 \"z:last\" undefined []</span></li><li></li><li>f( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> );        <span class=\"hljs-comment\">// 1 2 3 [\"z:last\"]</span></li><li></li><li>f( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> );    <span class=\"hljs-comment\">// 1 2 3 [4,\"z:last\"]</span></li></ul></code></pre><p><span><code>\"z:last\"</code>这个值被确实应用到<code>z</code>这个形参中，只有当<code>f(..)</code>函数时恰好只传递了两个实参的情况（匹配<code>x</code>和<code>y</code>形参）。在其余情况下，不管你在前面传入多少个实参，<code>\"z:last\"</code>都将仅仅匹配最右边的实参。</span></p><h1 id=\"BE4B880E6ACA1E4B880E4B8AA\">一次一个</h1><p><span>我们来看一个类似于局部应用的技术，一个期望输入多个实参的函数被分解成连续的链式函数，每个函数都将只接收一个实参（计数值：1），并且将会返回另一个函数来接受下一个实参。</span></p><p><span>这个技术被称之为<em>柯里化 currying</em><sup class=\"label\">注</sup>。</span></p><p class=\"translator\"><span>也译作：局部套用</span></p><p><span>首先，我们先来想想之前已经创建好的<code>ajax(..)</code>函数被柯里化之后的样子吧。按照定义，我们应该这么使用它：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li>curriedAjax( <span class=\"hljs-string\">\"http://some.api/person\"</span> )</li><li>    ( { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } )</li><li>        ( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foundUser</span>(<span class=\"hljs-params\">user</span>)</span>{ <span class=\"hljs-comment\">/* .. */</span> } );</li></ul></code></pre><p><span>也许把它拆成三个独立的调用有助于我们更好的理解情况：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> personFetcher = curriedAjax( <span class=\"hljs-string\">\"http://some.api/person\"</span> );</li><li></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = personFetcher( { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } );</li><li></li><li>getCurrentUser( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foundUser</span>(<span class=\"hljs-params\">user</span>)</span>{ <span class=\"hljs-comment\">/* .. */</span> } );</li></ul></code></pre><p><span>在这里既没有立刻使用所有参数（比如<code>ajax(..)</code>），也没有先应用部分然后再应用剩下的（比如<code>partial(..)</code>），这里的<code>curriedAjax(..)</code>函数在每个独立的函数调用中都只接受一个实参。</span><span>柯里化和局部应用在某种意义上是比较类似的，因为每个连续的柯里调用都可以看作是把另一个实参局部应用到原始函数中，直到所有实参都被传递了进去。</span><span>它们之间的最主要的区别是，<code>curriedAjax(..)</code>将会显式的返回一个函数（我们叫它<code>curriedGetPerson(..)</code>），它需要<em>仅输入下一个</em>实参数据，而不是所有剩下的实参（就像之前的<code>getPerson(..)</code>）。</span><span>假如原始函数预期输入5个实参，那么该函数的柯里形式只需要第一个实参，然后返回一个函数来接受第二个实参，这个函数只需要接受第二个实参，并返回一个函数来接受第三个实参……以此类推。</span></p><p><span>所以，柯里化将多计数值的函数转化为一个系列函数的链式调用。</span></p><p><span>我们如何定义一个方法来实现柯里化呢？我们将会使用第二章中的一些技巧：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curry</span>(<span class=\"hljs-params\">fn,arity = fn.length</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextCurried</span>(<span class=\"hljs-params\">prevArgs</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curried</span>(<span class=\"hljs-params\">nextArg</span>)</span>{</li><li>            <span class=\"hljs-keyword\">var</span> args = prevArgs.concat( [nextArg] );</li><li></li><li>            <span class=\"hljs-keyword\">if</span> (args.length &gt;= arity) {</li><li>                <span class=\"hljs-keyword\">return</span> fn( ...args );</li><li>            }</li><li>            <span class=\"hljs-keyword\">else</span> {</li><li>                <span class=\"hljs-keyword\">return</span> nextCurried( args );</li><li>            }</li><li>        };</li><li>    })( [] );</li><li>}</li></ul></code></pre><p><span>给ES6<code>=&gt;</code>符号的粉丝们：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> curry =</li><li>    <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, arity = fn.length, nextCurried</span>) =&gt;</span></li><li>        (nextCurried = <span class=\"hljs-function\"><span class=\"hljs-params\">prevArgs</span> =&gt;</span></li><li>            nextArg =&gt; {</li><li>                <span class=\"hljs-keyword\">var</span> args = prevArgs.concat( [nextArg] );</li><li></li><li>                <span class=\"hljs-keyword\">if</span> (args.length &gt;= arity) {</li><li>                    <span class=\"hljs-keyword\">return</span> fn( ...args );</li><li>                }</li><li>                <span class=\"hljs-keyword\">else</span> {</li><li>                    <span class=\"hljs-keyword\">return</span> nextCurried( args );</li><li>                }</li><li>            }</li><li>        )( [] );</li></ul></code></pre><p><span>这个方法将会从实参集合<code>prevArgs</code>为空<code>[]</code>数组的时候开始，并将每个接收到的<code>nextArg</code>添加其中，然后调用串联好的<code>args</code>数组。当<code>args.length</code>小于<code>arity</code>（原始函数<code>fn(..)</code>声明/期望的的形参数量）时，将会返回另一个<code>curried(..)</code>函数来继续收集接下来的<code>nextArg</code>实参，传递运行的<code>args</code>集合作为<code>prevArgs</code>。一旦我们有了足够的实参，就可以用它们来执行原始函数<code>fn(..)</code>函数了。</span><span>默认情况下，这样的实现依赖于能够检查待柯里化函数的<code>length</code>属性，以确定在收集所有预期的实参之前需要迭代多少次柯里化。</span><span>如果你对有不准确<code>length</code>属性的函数使用了这里的<code>curry(..)</code>实现——如何函数的形参签名包含了默认形参值，形参解构赋值，又或者是<code>...args</code>运算，请参考第二章——你需要手动的将<code>arity</code>（<code>curry(..)</code>的第二个形参）传递进去，以确保<code>curry(..)</code>正确工作。</span></p><p><span>这里是我们如何使用<code>curry(..)</code>来改写我们之前的<code>ajax(..)</code>的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> curriedAjax = curry( ajax );</li><li></li><li><span class=\"hljs-keyword\">var</span> personFetcher = curriedAjax( <span class=\"hljs-string\">\"http://some.api/person\"</span> );</li><li></li><li><span class=\"hljs-keyword\">var</span> getCurrentUser = personFetcher( { <span class=\"hljs-attr\">user</span>: CURRENT_USER_ID } );</li><li></li><li>getCurrentUser( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foundUser</span>(<span class=\"hljs-params\">user</span>)</span>{ <span class=\"hljs-comment\">/* .. */</span> } );</li></ul></code></pre><p><span>每次调用都给原始函数<code>ajax(..)</code>的调用增加一个实参，直到提供了所有的三个参数，此时<code>ajax(..)</code>就被执行了。</span></p><p><span>还记得我们之前给列表中每个值加<code>3</code>的例子吗？我们之前说过，柯里化和局部应用是很相似的，所以我们可以用几乎相同的方法来执行这个任务：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li></ul><ul class=\"code\"><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( curry( add )( <span class=\"hljs-number\">3</span> ) );</li><li><span class=\"hljs-comment\">// [4,5,6,7,8]</span></li></ul></code></pre><p><span>这两者之间有什么区别？<code>partial(add,3)</code> vs <code>curry(add)(3)</code>。为什么你会选择<code>curry(..)</code>而不是<code>partial(..)</code>？虽然你提前知道<code>add(..)</code>是用来调整的函数，但此时你并不知道用来调整的值是<code>3</code>：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> adder = curry( add );</li><li></li><li><span class=\"hljs-comment\">// later</span></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( adder( <span class=\"hljs-number\">3</span> ) );</li><li><span class=\"hljs-comment\">// [4,5,6,7,8]</span></li></ul></code></pre><p><span>另一个数字的例子会是怎么样呢，把它们同时排列出来就行啦：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...args</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;</li><li>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; args.length; i++) {</li><li>        sum += args[i];</li><li>    }</li><li>    <span class=\"hljs-keyword\">return</span> sum;</li><li>}</li><li></li><li>sum( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> );                        <span class=\"hljs-comment\">// 15</span></li><li></li><li><span class=\"hljs-comment\">// now with currying:</span></li><li><span class=\"hljs-comment\">// (5 to indicate how many we should wait for)</span></li><li><span class=\"hljs-keyword\">var</span> curriedSum = curry( sum, <span class=\"hljs-number\">5</span> );</li><li></li><li>curriedSum( <span class=\"hljs-number\">1</span> )( <span class=\"hljs-number\">2</span> )( <span class=\"hljs-number\">3</span> )( <span class=\"hljs-number\">4</span> )( <span class=\"hljs-number\">5</span> );        <span class=\"hljs-comment\">// 15</span></li></ul></code></pre><p><span>在这里柯里化的好处是，每次调用传递实参都会产生另一个更为专业的函数，我们可以在程序中捕获并使用该新函数。局部应用则是先指定部分实参，然后生成一个等待其余实参的函数。</span><span>如果要使用局部应用来实现依次指定一个参数，则必须在每个连续的函数上持续调用<code>partialApply(..)</code>。柯里化则能自动进行，这样一次一个的独立参数调用更加符合人体工程学。</span></p><p><span>在JavaScript中，柯里化和局部应用都是用了闭包来记录实参，直到所有实参都被接收到了，然后就能执行原始运算了。</span></p><h2 id=\"BE4B8BAE4BB80E4B988E8A681E4BDBFE794A8E69FAFE9878CE58C96E5928CE5B180E983A8E5BA94E794A8EFBC9F\">为什么要使用柯里化和局部应用？</h2><p><span>不管是柯里化的风格（<code>sum(1)(2)(3)</code>）又或者是局部应用的风格（<code>partial(sum,1,2)(3)</code>），相比于更为普通的函数调用而言（比如<code>sum(1, 2, 3)</code>）这俩毫无疑问都看起来非常奇怪。所以，为什么我们要采用函数式的呢？这个问题有多个层面的回答。</span></p><p><span>第一个也是最为明显的原因，柯里化和局部应用都允许你在时间/空间（在整个代码中）上分离各自指定的参数，而传统的函数调用必须要事先知道所有的参数才能实现。如果你在你的代码中某个地方知道了一些参数，然后又在另外的地方确定了其他的参数，柯里化或者局部应用在这种情况下会非常有用。</span><span>从另一个层次来讲，当组合只有一个实参的函数更为容易的时候，此时是最适合用柯里化的。所以对于最终需要3个实参的函数而言，假如它被柯里化了，将会编程只需要一个实参函数的三次调用。当我们开始编写这种函数的时候，这种一元函数将会更容易使用。我们稍后会继续讨论这个话题。</span></p><h2 id=\"BE5A49AE4BA8E1E4B8AAE5AE9EE58F82E79A84E69FAFE9878CE58C96\">多于1个实参的柯里化</h2><p><span>到目前为止，这就是我给出的关于柯里化的定义和实现。我相信，我们同样可以在JavaScript中借鉴到这样的精神。</span></p><p><span>具体来说，如果我们简要的看一下柯里化在<em>Haskell</em>中的工作原理，我们可以看到，多个实参总是一次一个地输入到一个函数中，每一次都是柯里化的调用，而不是使用元组<sup class=\"label\">注</sup>在单个实参中传输多个值。</span></p><p class=\"translator\"><span><em>Haskell</em>中的一种数据结构，结构上类似于数组，不过有些微妙的区别。当函数返回多个值时，常常用它来对多个值做封装。</span></p><p><span>比如，在<em>Haskell</em>：</span></p><pre class=\"haskell\"><code><ul class=\"gutter\"><li>1</li></ul><ul class=\"code\"><li><span class=\"hljs-title\">foo</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span></li></ul></code></pre><p><span>这里的<code>foo</code>函数调用，并且具有传递了三个值<code>1</code>、<code>2</code>和<code>3</code>的结果。但是在<em>Haskell</em>中的函数都是会自动的被柯里化的，这意味着每个值将会作为单独的柯里化调用被传入。对于JS而言，基本就等同于<code>foo(1)(2)(3)</code>，它与上面提到的<code>curry(..)</code>的风格是一样的。</span></p><p class=\"note\"><span>在<em>Haskell</em>中，<code>foo(1, 2, 3)</code>并不是将这三个值作为独立参数一次性的传递进去，而是使用一个元组来作为单个实参。为了能工作，需要改变<code>foo</code>来处理这个元组实参。据我所知，<em>Haskell</em>没有办法通过一个函数调用来传递所有的三个实参，每个实参都有自己的柯里化调用。当然，多个调用的存在对于<em>Haskell</em>而言是透明的，但是对于JS开发者而言，在语法上来看却是非常明显的。</span></p><p><span>由于这些原因，我认为我之前所展示的<code>curry(..)</code>非常忠实的展现了柯里化，所以我把它称为“严格柯里化”。</span><span>然而请注意，在大多数流行的JavaScript函数式编程库中，它们使用了更为宽松的定义。</span><span>具体来说，JS柯里化方法通常允许你为每个柯里化调用指定多个实参，重新考察我们前面的<code>sum(..)</code>的例子，它看起来就像是这样：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> curriedSum = looseCurry( sum, <span class=\"hljs-number\">5</span> );</li><li></li><li>curriedSum( <span class=\"hljs-number\">1</span> )( <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> )( <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> );            <span class=\"hljs-comment\">// 15</span></li></ul></code></pre><p><span>从语法上来说，这里的<code>( )</code>无疑要更少点，并且这里只有三个函数调用，比起之前的五个而言，性能更具优势。但除此之外，使用<code>looseCurry(..)</code>与前面更为狭隘的<code>curry(..)</code>而言，它们的最终结果都是相同的。我猜想便利性/性能因素可能是为什么这些框架允许多个实参的原因。这似乎只是一个风格问题。</span></p><p class=\"note\"><span>这个宽松的柯里化<em>确实</em>给予了你传递比<code>arity</code>（检测到或者指定的）多的实参的能力。如果你选择了可选/可变的函数设计，这也是有益处的。例如，如果需要柯里化5个实参，宽松的柯里化仍然允许存在多余5个实参（<code>curriedSum(1)(2,3,4)(5,6)</code>），但是严格柯里化则不会支持<code>curriedSum(1)(2)(3)(4)(5)(6)</code>。</span></p><p><span>我们可以将之前的柯里化的实现更改为下面这种更为常见的宽松定义：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">looseCurry</span>(<span class=\"hljs-params\">fn,arity = fn.length</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextCurried</span>(<span class=\"hljs-params\">prevArgs</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curried</span>(<span class=\"hljs-params\">...nextArgs</span>)</span>{</li><li>            <span class=\"hljs-keyword\">var</span> args = prevArgs.concat( nextArgs );</li><li></li><li>            <span class=\"hljs-keyword\">if</span> (args.length &gt;= arity) {</li><li>                <span class=\"hljs-keyword\">return</span> fn( ...args );</li><li>            }</li><li>            <span class=\"hljs-keyword\">else</span> {</li><li>                <span class=\"hljs-keyword\">return</span> nextCurried( args );</li><li>            }</li><li>        };</li><li>    })( [] );</li><li>}</li></ul></code></pre><p><span>现在每个柯里化调用都可以接受一个或者多个（<code>nextArgs</code>）实参，我们将把它作为一个练习，感兴趣的读者可以使用ES6的<code>=&gt;</code>符号来定义<code>looseCurry(..)</code>，就像我们之前对<code>curry(..)</code>所做的那样。</span></p><h2 id=\"BE8AFB7E4B88DE8A681E5868DE7BB99E68891E69FAFE9878CE58C96E4BA86E280A6E280A6\">请不要再给我柯里化了……</h2><p><span>有时候也会有这样一种情况，你有一个已经柯里化的函数，但是你想把它去柯里化，转变为普通函数——基本上就像是把函数<code>f(1)(2)(3)</code>变化为<code>g(1, 2,3)</code>函数。</span><span>这个令人（并不）震惊的标准方法通常被称作<code>uncurry(..)</code>。这里是一个简单的原生实现：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uncurry</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uncurried</span>(<span class=\"hljs-params\">...args</span>)</span>{</li><li>        <span class=\"hljs-keyword\">var</span> ret = fn;</li><li></li><li>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; args.length; i++) {</li><li>            ret = ret( args[i] );</li><li>        }</li><li></li><li>        <span class=\"hljs-keyword\">return</span> ret;</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> uncurry =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span></li><li>        (...args) =&gt; {</li><li>            <span class=\"hljs-keyword\">var</span> ret = fn;</li><li></li><li>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; args.length; i++) {</li><li>                ret = ret( args[i] );</li><li>            }</li><li></li><li>            <span class=\"hljs-keyword\">return</span> ret;</li><li>        };</li></ul></code></pre><p class=\"warning\"><span>不要假设<code>uncurry(curry(f))</code>相比<code>f</code>而言会有相同的行为。在一些库中，去柯里化得到的函数和原始函数是挺相似的，但并不完全相等。当然，我们在这里的例子也是一样的。假如你传递了和原始函数相同数量的实参给去柯里化所得的函数，那么它的行为（绝大部分）是和原始函数相同的。然而，假如你只传递了较少的实参，你仍然得到一个部分柯里化的函数，它将会继续等待其他参数的输入。</span></p><p><span>下面这个片段将会说明这个古怪的行为：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...args</span>) </span>{</li><li>    <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;</li><li>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; args.length; i++) {</li><li>        sum += args[i];</li><li>    }</li><li>    <span class=\"hljs-keyword\">return</span> sum;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> curriedSum = curry( sum, <span class=\"hljs-number\">5</span> );</li><li><span class=\"hljs-keyword\">var</span> uncurriedSum = uncurry( curriedSum );</li><li></li><li>curriedSum( <span class=\"hljs-number\">1</span> )( <span class=\"hljs-number\">2</span> )( <span class=\"hljs-number\">3</span> )( <span class=\"hljs-number\">4</span> )( <span class=\"hljs-number\">5</span> );        <span class=\"hljs-comment\">// 15</span></li><li></li><li>uncurriedSum( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> );                <span class=\"hljs-comment\">// 15</span></li><li>uncurriedSum( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> )( <span class=\"hljs-number\">4</span> )( <span class=\"hljs-number\">5</span> );            <span class=\"hljs-comment\">// 15</span></li></ul></code></pre><p><span>在使用<code>uncurry(..)</code>函数的时候，可能更为常见的情况并不是用它来处理像刚才显示的那样手动柯里化的函数，而是由于某些其他操作而生成的柯里化函数。我们将会在本章后面的 \"No Points\" 中来说明这种情况。</span></p><h1 id=\"BE5BD92E4B880E58C96\">归一化</h1><p><span>想象一下，你把一个函数传递给了一个方法，这个方法将会传递多个实参给你的函数，但是你可能只想接受一个单独的参数。尤其是当你有我们在上文中讨论过的宽松柯里化函数时，此时你的函数就会接受更多你不想要的参数。</span><span>我们可以设计一个封装了函数调用的方法，来确保只有一个实参被传递进来。因为这里将会强制将函数当做是一元函数，所以我们这么命名它：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unary</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onlyOneArg</span>(<span class=\"hljs-params\">arg</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( arg );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> unary =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span></li><li>        arg =&gt;</li><li>            fn( arg );</li></ul></code></pre><p><span>我们之前看到了<code>map(..)</code>方法，它给需要映射的函数提供了三个实参，<code>value</code>、<code>index</code>和<code>list</code>。如果您希望映射的函数仅接收其中的一个，比如<code>value</code>，那就可以使用<code>unary(..)</code>操作：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unary</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onlyOneArg</span>(<span class=\"hljs-params\">arg</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( arg );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> adder = looseCurry( sum, <span class=\"hljs-number\">2</span> );</li><li></li><li><span class=\"hljs-comment\">// oops:</span></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( adder( <span class=\"hljs-number\">3</span> ) );</li><li><span class=\"hljs-comment\">// [\"41,2,3,4,5\", \"61,2,3,4,5\", \"81,2,3,4,5\", \"101, ...</span></li><li></li><li><span class=\"hljs-comment\">// fixed with `unary(..)`:</span></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( unary( adder( <span class=\"hljs-number\">3</span> ) ) );</li><li><span class=\"hljs-comment\">// [4,5,6,7,8]</span></li></ul></code></pre><p><span>另一个常用的使用<code>unary(..)</code>的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li>[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>].map( <span class=\"hljs-built_in\">parseFloat</span> );</li><li><span class=\"hljs-comment\">// [1,2,3]</span></li><li></li><li>[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>].map( <span class=\"hljs-built_in\">parseInt</span> );</li><li><span class=\"hljs-comment\">// [1,NaN,NaN]</span></li><li></li><li>[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>].map( unary( <span class=\"hljs-built_in\">parseInt</span> ) );</li><li><span class=\"hljs-comment\">// [1,2,3]</span></li></ul></code></pre><p><span>对于签名<code>parseInt(str,radix)</code>，很明显<code>map(..)</code>将会在实参的第二个位置传递<code>index</code>，而这个实参将会被<code>parseInt(..)</code>解析为<code>radix</code>，这并不是我们希望看到的情况。<code>unary(..)</code>将会创建一个忽略除开第一个实参意外所有实参的函数，这意味着传递进去的<code>index</code>将不会被错误的当做是<code>radix</code>。</span></p><h2 id=\"BE4B880E4B8AAE58F88E4B880E4B8AA\">一个又一个</h2><p><span>说道只有一个实参的函数，函数式编程的工具中还有另一个很常见的基本操作，它接受一个实参，但是不对它做任何操作就直接返回它本身：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">identity</span>(<span class=\"hljs-params\">v</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> v;</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> identity =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span></li><li>        v;</li></ul></code></pre><p><span>这个方法看起来实在是太简单了，以至于好像没什么用。但即使是非常简单的函数，也可以在函数式的世界中有所帮助。就像他们在戏里说过的一样：角色没有主配之分，演员才有好坏之别。</span><span>例如，假设你希望使用正则表达式来切割字符串，但是结果数组中可能存在一些空值，为了丢弃这些空值，我们可以把<code>identity(..)</code>当做是谓词<sup class=\"label\">注</sup>，对它使用JS的<code>fitler(..)</code>数组操作（我们将在之后的内容中做详细讲解）：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> words = <span class=\"hljs-string\">\"   Now is the time for all...  \"</span>.split( <span class=\"hljs-regexp\">/\\s|\\b/</span> );</li><li>words;</li><li><span class=\"hljs-comment\">// [\"\",\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\",\"\"]</span></li><li></li><li>words.filter( identity );</li><li><span class=\"hljs-comment\">// [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"]</span></li></ul></code></pre><p class=\"translator\"><span>谓词，原文为<em>Predicates</em>。在计算机领域内是指返回真、假或是未确定值的条件表达式。</span></p><p class=\"note\"><span>在上面的例子中，还有另一个一元函数可以在这里当作谓词，那就是JS自己的<code>Boolean(..)</code>函数，它能够</span><span>显式的将值强制转换为<code>true</code>和<code>false</code>。</span></p><p><span><code>identity(..)</code>另一个用处就是可以作为默认函数来代替转换：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">output</span>(<span class=\"hljs-params\">msg,formatFn = identity</span>) </span>{</li><li>    msg = formatFn( msg );</li><li>    <span class=\"hljs-built_in\">console</span>.log( msg );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">upper</span>(<span class=\"hljs-params\">txt</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> txt.toUpperCase();</li><li>}</li><li></li><li>output( <span class=\"hljs-string\">\"Hello World\"</span>, upper );        <span class=\"hljs-comment\">// HELLO WORLD</span></li><li>output( <span class=\"hljs-string\">\"Hello World\"</span> );            <span class=\"hljs-comment\">// Hello World</span></li></ul></code></pre><p><span>假如<code>output(..)</code>没有<code>formatFn</code>的默认值，我们可以把我们之前的朋友<code>partialRight(..)</code>拿过来：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> specialOutput = partialRight( output, upper );</li><li><span class=\"hljs-keyword\">var</span> simpleOutput = partialRight( output, identity );</li><li></li><li>specialOutput( <span class=\"hljs-string\">\"Hello World\"</span> );        <span class=\"hljs-comment\">// HELLO WORLD</span></li><li>simpleOutput( <span class=\"hljs-string\">\"Hello World\"</span> );        <span class=\"hljs-comment\">// Hello World</span></li></ul></code></pre><p><span>你也能看到<code>identity(..)</code>被用来作为<code>map(..)</code>调用的默认转换函数，或者是列表的<code>reduce(..)</code>函数的初始值，这些方法我们我们将会在第八章中详细讲解。</span></p><h2 id=\"BE4B88DE58F98E4B98BE580BC\">不变之值</h2><p><span>某些API不允许你将值直接传递到方法中，所以你必须传递函数，即使该函数只是直接返回值。 在JS Promises中一的<code>then(..)</code>方法就是这样的API。许多人声称ES6的<code>=&gt;</code>箭头函数是这种情况下的“解决方案”，但是有一个函数式的方法非常适合这个需求：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">constant</span>(<span class=\"hljs-params\">v</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">value</span>(<span class=\"hljs-params\"></span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> v;</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; form</span></li><li><span class=\"hljs-keyword\">var</span> constant =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span></li><li>        () =&gt;</li><li>            v;</li></ul></code></pre><p><span>有了这个整洁的小工具，我们就可以解决<code>then(..)</code>的烦恼啦：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li>p1.then( foo ).then( <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> p2 ).then( bar );</li><li></li><li><span class=\"hljs-comment\">// vs</span></li><li></li><li>p1.then( foo ).then( constant( p2 ) ).then( bar );</li></ul></code></pre><p class=\"warning\"><span>虽然<code>() =&gt; p2</code>箭头函数版本虽然比<code>constant(p2)</code>要短，但我仍然希望你能克制使用它的诱惑。箭头函数将会返回从外部而来的一个值，这从函数式的角度来说要更差一点，第五章“减少副作用”的内容将会详细介绍这类行为陷阱。</span></p><h1 id=\"BE68A8AE5AE83E4BBACE983BDE6918AE5BC80E69DA5\">把它们都摊开来</h1><p><span>在第二章我们简单的介绍了下形参数组的解构赋值，我们回顾一下这个例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"> [x,y,...args] </span>) </span>{</li><li>    <span class=\"hljs-comment\">// ..</span></li><li>}</li><li></li><li>foo( [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] );</li></ul></code></pre><p><span>在<code>foo(..)</code>的形参列表中，我们进行了这样的声明，我们希望将一个单独的数组实参分解——或者从实际效果上来讲，应该叫展开——并将其赋值给独立的命名形参<code>x</code>和<code>y</code>。数组中除了头两个位置之外的其他值都会被<code>...</code>运算符聚合到<code>args</code>数组中。</span><span>如果必须传入一个数组，但是你想把它的内容当做是独立的参数来处理，此时这个技巧会非常方便。</span></p><p><span>有时候你想使用形参数组的解构赋值，但是却没有能力去改变函数声明，想想这样的函数：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x,y</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( x + y );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    fn( [ <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span> ] );</li><li>}</li><li></li><li>bar( foo );            <span class=\"hljs-comment\">// fails</span></li></ul></code></pre><p><span>你能指出，为什么<code>bar(foo)</code>失败了吗？</span><span>数组<code>[3, 9]</code>被当做是一个单独的值被传输给了<code>fn(..)</code>，但<code>foo(..)</code>的正确输入应该是分立参数<code>x</code>和<code>y</code>。假如我们能够把函数<code>foo(..)</code>的声明改变为<code>function foo([x,y]) {..</code>，那就最好不过了。又或者是我们可以改变<code>bar(..)</code>的行为，让它这样来进行函数调用<code>fn(...[3, 9])</code>，这两个值<code>3</code>和<code>9</code>都将会被独立传递进去。</span></p><p><span>有时候你就是有两个这样不兼容的函数，并且由于各种外部原因，你又无法更改其声明/定义。那么问题来了，你要如何使用它们呢？</span><span>我们可以定义一个辅助函数来调整它们，以便于它将一个接收到的数组拆分开来：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">spreadArgs</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">spreadFn</span>(<span class=\"hljs-params\">argsArr</span>) </span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( ...argsArr );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> spreadArgs =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span></li><li>        argsArr =&gt;</li><li>            fn( ...argsArr );</li></ul></code></pre><p class=\"note\"><span>我这里的辅助函数名为<code>spreadArgs(..)</code>，但是在像<em>Ramda</em>这样的库中，它通常被称为<code>apply(..)</code>。</span></p><p><span>现在我们可以使用<code>spreadArgs(..)</code>来调整<code>foo(..)</code>了，这样它就能给<code>bar(..)</code>正确的输入了。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li></ul><ul class=\"code\"><li>bar( spreadArgs( foo ) );            <span class=\"hljs-comment\">// 12</span></li></ul></code></pre><p><span>这里到底发生了什么，似乎有点难以理解，但是请相信我，它们能够正常工作。从本质上来说，<code>spreadArgs(..)</code>将会允许我们定义一个通过数组来<code>return</code>多个值的函数，并且这多个值对于另一个函数的输入而言，也将会被看做是独立的值。</span><span>当一个函数的输出成为了另一个函数的输入，这样的行为被称作<em>函数组合 composition</em>，我们将会在第四章详细的介绍它们。</span><span>当我们在讨论<code>spreadArgs(..)</code>方法的时候，我们再来定义一个与之相对的方法吧：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gatherArgs</span>(<span class=\"hljs-params\">fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gatheredFn</span>(<span class=\"hljs-params\">...argsArr</span>) </span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( argsArr );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> gatherArgs =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">fn</span> =&gt;</span></li><li>        (...argsArr) =&gt;</li><li>            fn( argsArr );</li></ul></code></pre><p class=\"note\"><span>在<em>Ramda</em>中，这个方法被称作<code>unapply(..)</code>，它与<code>apply(..)</code>刚好相反，我觉得<em>扩展 spread</em>、<em>聚合 gather</em>这样的术语对于发生了什么更具描述性。</span></p><p><span>我们可以使用这个方法把独立的实参聚合成为一个单独的数组，因为我们可能会面临这样的情况，我们需要调整一个数组形参解构赋值的函数，让它去接受另一个函数的输出，而这些输出则是一些独立的实参。我们将会在第8章更详细的介绍<code>reduce(..)</code>，但是简单的来说，它将会不断调用他那有两个独立形参的回调函数，现在我们能够把它们<em>聚合</em>起来了：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">combineFirstTwo</span>(<span class=\"hljs-params\">[ v1, v2 ]</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> v1 + v2;</li><li>}</li><li></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].reduce( gatherArgs( combineFirstTwo ) );</li><li><span class=\"hljs-comment\">// 15</span></li></ul></code></pre><h1 id=\"BE794B1E9A1BAE5BA8FE980A0E68890E79A84E9BABBE783A6\">由顺序造成的麻烦</h1><p><span>对于有多个形参的柯里化和局部应用来说，有一个麻烦是始终无法避免的，那就是我们必须要按照一定的顺序来操作实参。有时候为了对某函数进行柯里化，我们定义了一个按照一定顺序且带形参的函数，但是在很多情况下，这个顺序是不兼容的，我们必须付出极大的努力才能重新排序。</span><span>这事儿的麻烦之处不仅仅在于我们需要一些方法来处理这些属性，还因为这些东西将会给我们的代码带来一些额外的噪音，并使我们的代码复杂化。这些东西就像是小纸屑，当它们还比较少的时候，并不是什么问题，但痛苦会随着它们的增长而累加。</span><span>面对这由实参顺序带来的暴政，我们有什么能做的吗！？</span></p><p><span>在第二章，我们介绍了命名实参的解构赋值，回想一下：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"> {x,y} = {} </span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( x, y );</li><li>}</li><li></li><li>foo( {</li><li>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">3</span></li><li>} );                    <span class=\"hljs-comment\">// undefined 3</span></li></ul></code></pre><p><span>我们将<code>foo(..)</code>函数的第一个形参进行了解构赋值——它本来的期望输入是一个对象——现在它被赋值给了两个单独的形参<code>x</code>和<code>y</code>。然后，在调用的时候，我们传入了一个单独的对象实参，并且这个对象实参提供了所需属性的“命名实参”来映射到具体的形参之中。</span><span>命名实参最主要的优势就是在于，它不需要处理参数的排序，从而提高代码的可读性。如果我们正在开发与对象属性相关的方法，那就可以利用这一点来改进柯里化/局部应用。</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partialProps</span>(<span class=\"hljs-params\">fn,presetArgsObj</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partiallyApplied</span>(<span class=\"hljs-params\">laterArgsObj</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( <span class=\"hljs-built_in\">Object</span>.assign( {}, presetArgsObj, laterArgsObj ) );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curryProps</span>(<span class=\"hljs-params\">fn,arity = <span class=\"hljs-number\">1</span></span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextCurried</span>(<span class=\"hljs-params\">prevArgsObj</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curried</span>(<span class=\"hljs-params\">nextArgObj = {}</span>)</span>{</li><li>            <span class=\"hljs-keyword\">var</span> [key] = <span class=\"hljs-built_in\">Object</span>.keys( nextArgObj );</li><li>            <span class=\"hljs-keyword\">var</span> allArgsObj = <span class=\"hljs-built_in\">Object</span>.assign( {}, prevArgsObj, { [key]: nextArgObj[key] } );</li><li></li><li>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Object</span>.keys( allArgsObj ).length &gt;= arity) {</li><li>                <span class=\"hljs-keyword\">return</span> fn( allArgsObj );</li><li>            }</li><li>            <span class=\"hljs-keyword\">else</span> {</li><li>                <span class=\"hljs-keyword\">return</span> nextCurried( allArgsObj );</li><li>            }</li><li>        };</li><li>    })( {} );</li><li>}</li></ul></code></pre><p><span>我们甚至不需要<code>partialPropsRight(..)</code>方法，因为我们实际上并不关心属性映射的顺序，名称映射让参数顺序变得无足轻重。</span></p><p><span>下面的代码演示了我们如何使用这些方法：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">{ x, y, z } = {}</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">`x:<span class=\"hljs-subst\">${x}</span> y:<span class=\"hljs-subst\">${y}</span> z:<span class=\"hljs-subst\">${z}</span>`</span> );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> f1 = curryProps( foo, <span class=\"hljs-number\">3</span> );</li><li><span class=\"hljs-keyword\">var</span> f2 = partialProps( foo, { <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span> } );</li><li></li><li>f1( {<span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>} )( {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>} )( {<span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>} );</li><li><span class=\"hljs-comment\">// x:1 y:2 z:3</span></li><li></li><li>f2( { <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> } );</li><li><span class=\"hljs-comment\">// x:1 y:2 z:3</span></li></ul></code></pre><p><span>顺序已经变得完全不重要了！现在，我们可以在任何有意义的序列中指定所需的实参，不会再有<code>reverseArgs(..)</code>或者其他什么恼人的事情了！太棒了！</span></p><h2 id=\"BE5B195E5BC80E5B19EE680A7\">展开属性</h2><p><span>不幸的是，只有当我们控制了<code>foo(..)</code>的签名，并且将其第一个形参定义为解构赋值的时候，这项技术才能起作用。假设我们遇到了这样一个情况，这个函数具有着独立的形参列表（没有形参解构赋值），并且我们不能改变它的签名，这种时候我们又想使用这个技术，应该怎么办呢？</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">`x:<span class=\"hljs-subst\">${x}</span> y:<span class=\"hljs-subst\">${y}</span> z:<span class=\"hljs-subst\">${z}</span>`</span> );</li><li>}</li></ul></code></pre><p><span>和之前的<code>spreadArgs(..)</code>方法很相似，我们可以定义一个<code>spreadArgProps(..)</code>方法来辅助我们，这个方法将<code>key: value</code>对从对象实参中拿出，并把这些“展开”的值作为独立实参传出。</span><span>不过，这里有些坑需要注意。<code>spreadArgs(..)</code>我们用它来处理数组，这也就意味着它内部的顺序是非常明确的确定了的。然而，对于对象而言，属性的顺序并不是那么清楚明了，或者说不一定是可靠的。对于创建方式或者说属性设置不同的对象而言，我们并不能百分之百确定在枚举属性的时候会出现什么。</span><span>这个方法需要一种方式来定义所涉及函数其期望的形参顺序（如属性枚举顺序）。我们可以通过像<code>[\"x\", \"y\", \"z\"]</code>这样的数组来告诉方法，使用这个顺序来从实参中拉出属性值。</span><span>这种方法是王道的，但也是遗憾的……因为不管这个函数有多么简单，我们都<em>必须</em>为它添加<em>属性名称</em>数组。那么，至少是在常见的简单情况下，我们有什么技巧可以用来检测函数形参列表的顺序呢？幸运的是，答案是肯定的！</span><span>JavaScript函数有一个<code>.toString()</code>方法，它将会把函数代码用字符串表示出来，这其中当然也就包含了函数声明的签名。拿出我们封存许久的正则表达式技能，我们就能够解析代表着函数的这堆字符串，从中找出独立的命名形参。这段代码看起来有点粗糙，但是它已经足够完成它的工作了：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">spreadArgProps</span>(<span class=\"hljs-params\"></li><li>    fn,</li><li>    propOrder =</li><li>        fn.toString(</span>)</li><li>        .<span class=\"hljs-title\">replace</span>(<span class=\"hljs-params\"> <span class=\"hljs-regexp\">/^(?:(?:function.*\\(([^]*?)\\))|(?:([^\\(\\)]+?)\\s*=&gt;)|(?:\\(([^]*?)\\)\\s*=&gt;))[^]+$/</span>, <span class=\"hljs-string\">\"$1$2$3\"</span> </span>)</li><li>        .<span class=\"hljs-title\">split</span>(<span class=\"hljs-params\"> <span class=\"hljs-regexp\">/\\s*,\\s*/</span> </span>)</li><li>        .<span class=\"hljs-title\">map</span>(<span class=\"hljs-params\"> v =&gt; v.replace( <span class=\"hljs-regexp\">/[=\\s].*$/</span>, <span class=\"hljs-string\">\"\"</span> </span>) )</li><li>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">spreadFn</span>(<span class=\"hljs-params\">argsObj</span>) </span>{</li><li>        <span class=\"hljs-keyword\">return</span> fn( ...propOrder.map( <span class=\"hljs-function\"><span class=\"hljs-params\">k</span> =&gt;</span> argsObj[k] ) );</li><li>    };</li><li>}</li></ul></code></pre><p class=\"note\"><span>这个方法的形参解析逻辑离无懈可击还远的很，当我们决定使用正则表达式来解析代码的时候，这就已经错了。但是，我们唯一的目的是为了处理相同的情况，这个理由就已经足够了。我们需要的只是一个用于检测含有简单形参（当然也包含它的默认值）的函数的形参的顺序的函数。例如，我们并不需要它能够解析复杂的解构赋值的形参，因为无论如何，我们都不大可能使用这个方法。因此，这一逻辑能够完成差不多80%的工作，它允许我们重写<code>propOrder</code>数组，用于解析其他更复杂的函数签名，否则它们将不会得到正确的解析。这就是这本书试图寻找的一种在实践中的平衡。</span></p><p><span>让我们来说明一下如何使用<code>spreadArgProps(..)</code>方法：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">x,y,z</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">`x:<span class=\"hljs-subst\">${x}</span> y:<span class=\"hljs-subst\">${y}</span> z:<span class=\"hljs-subst\">${z}</span>`</span> );</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> f3 = curryProps( spreadArgProps( bar ), <span class=\"hljs-number\">3</span> );</li><li><span class=\"hljs-keyword\">var</span> f4 = partialProps( spreadArgProps( bar ), { <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span> } );</li><li></li><li>f3( {<span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>} )( {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>} )( {<span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>} );</li><li><span class=\"hljs-comment\">// x:1 y:2 z:3</span></li><li></li><li>f4( { <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> } );</li><li><span class=\"hljs-comment\">// x:1 y:2 z:3</span></li></ul></code></pre><p class=\"warning\"><span>我在这里所展现的“对象参数/命名实参”的模式，通过减少因为参数顺序而引入的杂耍式的技巧，从而达到明显提高代码的可读性的目的。但是据我所知，并没有主流的函数式的库使用这种方法。这样做的代价就是，与大多数的JavaScript函数式编程的做法相比，它更不为人所熟悉。</span></p><p><span>另外，用这种方式定义的函数，它在使用的时候要求你必须了解每个参数的名称。你不能只记住，“哦，函数将会作为第一个实参”，相反，你必须记住，“这个函数形参的名字是'fn'”。</span><span>你必须仔细权衡这些因素。</span></p><h1 id=\"BNo20Points\">No Points</h1><p><span>函数式编程的世界中流行的编码风格是这样的，通过删除不必要的形参-实参映射来一定程度上减少视觉混乱。这种风格正式的名字是叫<em>Tacit programming</em>，或者普通点的叫法是：<em>point-free style</em><sup class=\"label\">注</sup>。<em>point</em>在这里指代的是函数的形参。</span></p><p class=\"translator\"><span>我并未找到正式的中文翻译，只看到阮一峰老师将之译为<em>无值风格</em>，本文之后也将沿用这个名称。</span><span><a href=\"http://www.ruanyifeng.com/blog/2017/03/pointfree.html\">Pointfree 编程风格指南</a></span></p><p class=\"warning\"><span>暂停一下。我想要强调一点，我们在这里的讨论并不是个无限制的建议，我们并不建议你用无值风格来编写你所有的函数式代码。当你适度的使用它时，这的确是一种可以提高可读性的技术。但就像软件开发中的大多数事情一样，也存在着滥用它的可能性。如果因为你苦苦思索的无值风格代码让你的代码变得更加难以理解，那么请停止这么做吧。用一些聪明但却深奥的办法来从代码中删除另一些“point”，你并不会因此而获得荣誉。</span></p><p><span>让我们从一个简单的例子开始：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">double</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> x * <span class=\"hljs-number\">2</span>;</li><li>}</li><li></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapper</span>(<span class=\"hljs-params\">v</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> double( v );</li><li>} );</li><li><span class=\"hljs-comment\">// [2,4,6,8,10]</span></li></ul></code></pre><p><span>看到了吗，<code>mapper(..)</code>和<code>double(..)</code>有着相同（或者叫兼容的）的签名。在<code>double(..)</code>调用的时候，形参(<em>point</em>)<code>v</code>能够直接映射到对应的实参。因此，<code>mapper(..)</code>函数的封装是完全没有必要的。让我们来试试更简单的无值风格：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">double</span>(<span class=\"hljs-params\">x</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> x * <span class=\"hljs-number\">2</span>;</li><li>}</li><li></li><li>[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>].map( double );</li><li><span class=\"hljs-comment\">// [2,4,6,8,10]</span></li></ul></code></pre><p><span>我们来复习下之前的另一个例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li></ul><ul class=\"code\"><li>[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>].map( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapper</span>(<span class=\"hljs-params\">v</span>)</span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>( v );</li><li>} );</li><li><span class=\"hljs-comment\">// [1,2,3]</span></li></ul></code></pre><p><span>在这个例子中，<code>mapper(..)</code>的存在实际上是服务于一个非常重要的目的，我们需要舍弃掉从<code>map(..)</code>传入的<code>index</code>实参，因为<code>parseInt(..)</code>将会错误的将该值当作是解析值的基数。下面是<code>unary(..)</code>帮助处理这种情况的例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li></ul><ul class=\"code\"><li>[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>].map( unary( <span class=\"hljs-built_in\">parseInt</span> ) );</li><li><span class=\"hljs-comment\">// [1,2,3]</span></li></ul></code></pre><p><span>你需要注意的关键在于，假如你有一个带有形参的函数，而它将会直接传递给内部的函数调用。在上面的两个例子中，<code>mapper(..)</code>都有形参<code>v</code>，而且它都被径直传递给了另外的函数调用。我们可以使用<code>unary(..)</code>的无值表达式来代替这层抽象。</span></p><p class=\"warning\"><span>你可能已经像我一样被吸引住了，然后开始尝试<code>map(partialRight(parseInt,10))</code>，想要部分应用<code>10</code>这个值，作为<code>radix</code>。然而，正如我之前所提到的，<code>partialRight(..)</code>只能保证<code>10</code>将会是传入的最后一个实参，而不是特定的第二个实参。由于<code>map(..)</code>将会三个实参<code>(value, index, arr)</code>传递给它的映射函数，所以<code>10</code>将会成为<code>parseInt(..)</code>的第四个参数，而<code>parseInt(..)</code>只会注意前两个实参。</span></p><p><span>这里有另外一个例子：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li></ul><ul class=\"code\"><li><span class=\"hljs-comment\">// convenience to avoid any potential binding issue</span></li><li><span class=\"hljs-comment\">// with trying to use `console.log` as a function</span></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">output</span>(<span class=\"hljs-params\">txt</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( txt );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printIf</span>(<span class=\"hljs-params\"> predicate, msg </span>) </span>{</li><li>    <span class=\"hljs-keyword\">if</span> (predicate( msg )) {</li><li>        output( msg );</li><li>    }</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isShortEnough</span>(<span class=\"hljs-params\">str</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> str.length &lt;= <span class=\"hljs-number\">5</span>;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> msg1 = <span class=\"hljs-string\">\"Hello\"</span>;</li><li><span class=\"hljs-keyword\">var</span> msg2 = msg1 + <span class=\"hljs-string\">\" World\"</span>;</li><li></li><li>printIf( isShortEnough, msg1 );            <span class=\"hljs-comment\">// Hello</span></li><li>printIf( isShortEnough, msg2 );</li></ul></code></pre><p><span>现在我们假设你想打印一个足够长的消息，换句话说，它是<code>!isShortEnough(..)</code>的。你在一开始可能会这么想：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isLongEnough</span>(<span class=\"hljs-params\">str</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> !isShortEnough( str );</li><li>}</li><li></li><li>printIf( isLongEnough, msg1 );</li><li>printIf( isLongEnough, msg2 );            <span class=\"hljs-comment\">// Hello World</span></li></ul></code></pre><p><span>太简单了……但是你使用了<em>points</em>！看到<code>str</code>是怎么被传递进去了的吗？在不重新实现对<code>str.length</code>检查的情况下，我们可以将这个代码重构为无值风格的吗？</span></p><p><span>我们来定义一个<code>not(..)</code>否定辅助器（在函数式的库中经常被引用作<code>complement(..)</code>）：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">not</span>(<span class=\"hljs-params\">predicate</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">negated</span>(<span class=\"hljs-params\">...args</span>)</span>{</li><li>        <span class=\"hljs-keyword\">return</span> !predicate( ...args );</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; arrow form</span></li><li><span class=\"hljs-keyword\">var</span> not =</li><li>    <span class=\"hljs-function\"><span class=\"hljs-params\">predicate</span> =&gt;</span></li><li>        (...args) =&gt;</li><li>            !predicate( ...args );</li></ul></code></pre><p><span>然后，我们使用<code>not(..)</code>来替换定义没有<em>points</em>的<code>isLongEnough(..)</code>：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> isLongEnough = not( isShortEnough );</li><li></li><li>printIf( isLongEnough, msg2 );            <span class=\"hljs-comment\">// Hello World</span></li></ul></code></pre><p><span>看起来好多了，是吧？但我们还<em>能够</em>更进一步。<code>printIf(..)</code>函数自身实际上就可以被重构为无值形式的了。</span></p><p><span>我们可以用<code>when</code>方法来表达<code>if</code>条件部分：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">when</span>(<span class=\"hljs-params\">predicate,fn</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">conditional</span>(<span class=\"hljs-params\">...args</span>)</span>{</li><li>        <span class=\"hljs-keyword\">if</span> (predicate( ...args )) {</li><li>            <span class=\"hljs-keyword\">return</span> fn( ...args );</li><li>        }</li><li>    };</li><li>}</li><li></li><li><span class=\"hljs-comment\">// or the ES6 =&gt; form</span></li><li><span class=\"hljs-keyword\">var</span> when =</li><li>    <span class=\"hljs-function\">(<span class=\"hljs-params\">predicate,fn</span>) =&gt;</span></li><li>        (...args) =&gt;</li><li>            predicate( ...args ) ? fn( ...args ) : <span class=\"hljs-literal\">undefined</span>;</li></ul></code></pre><p><span>让我们用几个在前面章节中看到过的其他辅助方法混合<code>when(..)</code>，来实现无值的<code>printIf(..)</code>：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li></ul><ul class=\"code\"><li><span class=\"hljs-keyword\">var</span> printIf = uncurry( rightPartial( when, output ) );</li></ul></code></pre><p><span>我来解释一下我们做了什么：我们先把<code>output</code>函数使用右向部分应用，把它作为了第二个实参（<code>fn</code>）传递给了<code>when(..)</code>。这样的话，对我们而言就还剩下预期输入第一个参数（<code>predicate</code>）的函数，<em>这个</em>函数调用的时候会产生另一个函数，这个新函数的预期输入是消息字符串；<em>它</em>看起来像是这样：<code>fn(predicate)(str)</code>。</span><span>多个（2个）函数的链式调用看起来就像是个可怕的柯里化函数一样，所以我们对这个结果使用<code>uncurry(..)</code>，把它变成一个单函数，这个单函数的预期输入是<code>str</code>和<code>predicate</code>这两个实参，它们和原始<code>printIf(predicate,str)</code>的签名相匹配。</span></p><p><span>下面我们将整个示例放在了一起：</span></p><pre class=\"javascript\"><code><ul class=\"gutter\"><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li></ul><ul class=\"code\"><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">output</span>(<span class=\"hljs-params\">msg</span>) </span>{</li><li>    <span class=\"hljs-built_in\">console</span>.log( msg );</li><li>}</li><li></li><li><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isShortEnough</span>(<span class=\"hljs-params\">str</span>) </span>{</li><li>    <span class=\"hljs-keyword\">return</span> str.length &lt;= <span class=\"hljs-number\">5</span>;</li><li>}</li><li></li><li><span class=\"hljs-keyword\">var</span> isLongEnough = not( isShortEnough );</li><li></li><li><span class=\"hljs-keyword\">var</span> printIf = uncurry( partialRight( when, output ) );</li><li></li><li><span class=\"hljs-keyword\">var</span> msg1 = <span class=\"hljs-string\">\"Hello\"</span>;</li><li><span class=\"hljs-keyword\">var</span> msg2 = msg1 + <span class=\"hljs-string\">\" World\"</span>;</li><li></li><li>printIf( isShortEnough, msg1 );            <span class=\"hljs-comment\">// Hello</span></li><li>printIf( isShortEnough, msg2 );</li><li></li><li>printIf( isLongEnough, msg1 );</li><li>printIf( isLongEnough, msg2 );            <span class=\"hljs-comment\">// Hello World</span></li></ul></code></pre><p><span>希望无值风格的函数式编程练习能够变得更有意义。为了能让自己自然而然的思考这个问题，仍然是需要大量的练习。而且你仍然必须对无值风格是否值得做出判断，它在多大程度上有助于你的代码的可读性。</span></p><p><span>你怎么看？有值或者是无值？</span></p><p class=\"note\"><span>想要更过的无值风格代码的练习？基于函数组合的新知识，我们将会在第四章的<em>再谈 Points</em>一节中重新探讨这个技术。</span></p><h1 id=\"BE680BBE7BB93\">总结</h1><p><span>部分应用是一种通过创建新函数（其中，某些实参被预置）来减少函数期望输入的实参数量的技术。</span></p><p><span>柯里化是一种特殊形式的部分应用，其中计数值被减少到1，具有连续的函数调用链，每个调用都只会接受一个实参。一旦这些函数调用指定了所有实参，所有的输入实参会被收集起来，并执行原始函数。你也可以撤销一个柯里化。</span></p><p><span>其他的像是<code>unary(..)</code>，<code>identity(..)</code>以及<code>constant(..)</code>这些重要操作，都是函数式编程中基本工具的一部分。</span></p><p><span>无值<em>Point-free</em>是一种编程风格，可以消除不必要的形参（points）对实参的映射，目的是读者更容易阅读/理解代码。</span></p>"}